random_slope = T; time_var = "time"; ar_cov = F;
burn_in = 1000; nsim = 4000; thin = 1; seed = 3;
verbose = TRUE; sig_prior = 1000000000; sd_vec = c(0.15, 0.30, 0.1)
sd_vec = c(0.12, 0.30, 0.1)
## Long version of dataset
full_X <- model.matrix.lm(as.formula(formula), data = data, na.action = "na.pass")
out_vars <- setdiff(all.vars(formula), colnames(full_X))
cont_out_var <- setdiff(out_vars, ordinal_outcome)
data$row_num <- 1:nrow(data)
data$pat_idx_num <- dense_rank(data$pat_idx)
## Extract matrices for multiplication of random effects
full_Z <- matrix(rep(1, nrow(data)), ncol = 1)
if (random_slope) {
full_Z <- cbind(full_Z, full_X[, time_var, drop = FALSE])
}
full_Z_kron <- kronecker(diag(rep(1, length(out_vars))), full_Z)
## Max number of observations
max_obs <- data %>%
group_by(pat_idx) %>%
summarise(N = n()) %>%
ungroup() %>%
select(N) %>%
unlist() %>%
max()
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = T,
time_var = time_var, ar_cov = F,
burn_in = 250, nsim = 1000, thin = thin,
seed = seed,
sd_vec = sd_vec)
colMeans(samps$res_accept)
get_DIC(samps)
get_waic_ar(samps)$estim
sim_data <- gen_ar_errors(N = 6, N_pat = 55, unequal = F, seed = 4,
slope = F, ar_cov = T)
crossprod(sim_data$alpha) / nrow(sim_data$alpha)
crossprod(MASS::mvrnorm(100, mu = c(0, 0, 0, 0) ,Sigma = sim_data$sig_alpha)) / 100
formula = cbind(y_ord, y2) ~ time; data = sim_data$data;
ordinal_outcome = "y_ord"; patient_var = "pat_idx";
random_slope = T; time_var = "time"; ar_cov = F;
burn_in = 250; nsim = 750; thin = 1; seed = 3;
verbose = TRUE; sig_prior = 1000000000; sd_vec = c(0.15, 0.30, 0.1)
sd_vec = c(0.12, 0.30, 0.1)
i <- 1
sim_data <- gen_ar_errors(N = 6, N_pat = 55, unequal = F, seed = 4,
slope = F, ar_cov = T)
crossprod(sim_data$alpha) / nrow(sim_data$alpha)
crossprod(MASS::mvrnorm(100, mu = c(0, 0, 0, 0) ,Sigma = sim_data$sig_alpha)) / 100
formula = cbind(y_ord, y2) ~ time; data = sim_data$data;
ordinal_outcome = "y_ord"; patient_var = "pat_idx";
random_slope = T; time_var = "time"; ar_cov = F;
burn_in = 250; nsim = 750; thin = 1; seed = 3;
verbose = TRUE; sig_prior = 1000000000; sd_vec = c(0.15, 0.30, 0.1)
sd_vec = c(0.12, 0.30, 0.1)
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = T,
time_var = time_var, ar_cov = F,
burn_in = burn, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = T,
time_var = time_var, ar_cov = F,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
colMeans(samps$res_accept)
get_DIC(samps)
get_waic_ar(samps)$estim
## Long version of dataset
full_X <- model.matrix.lm(as.formula(formula), data = data, na.action = "na.pass")
out_vars <- setdiff(all.vars(formula), colnames(full_X))
cont_out_var <- setdiff(out_vars, ordinal_outcome)
data$row_num <- 1:nrow(data)
data$pat_idx_num <- dense_rank(data$pat_idx)
## Extract matrices for multiplication of random effects
full_Z <- matrix(rep(1, nrow(data)), ncol = 1)
if (random_slope) {
full_Z <- cbind(full_Z, full_X[, time_var, drop = FALSE])
}
full_Z_kron <- kronecker(diag(rep(1, length(out_vars))), full_Z)
## Max number of observations
max_obs <- data %>%
group_by(pat_idx) %>%
summarise(N = n()) %>%
ungroup() %>%
select(N) %>%
unlist() %>%
max()
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!samps) samps_tmp$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = T)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = T)
if(!samps) samps_tmp$res_ar[] <- 0
if(!samps) samps$res_ar[] <- 0
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = T)
get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
for(i in i:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
i <- 1
sim_data <- gen_ar_errors(N = 6, N_pat = 55, unequal = F, seed = 4,
slope = T, ar_cov = T)
crossprod(sim_data$alpha) / nrow(sim_data$alpha)
crossprod(MASS::mvrnorm(100, mu = c(0, 0, 0, 0) ,Sigma = sim_data$sig_alpha)) / 100
formula = cbind(y_ord, y2) ~ time; data = sim_data$data;
ordinal_outcome = "y_ord"; patient_var = "pat_idx";
random_slope = T; time_var = "time"; ar_cov = F;
burn_in = 250; nsim = 750; thin = 1; seed = 3;
verbose = TRUE; sig_prior = 1000000000; sd_vec = c(0.15, 0.30, 0.1)
sd_vec = c(0.12, 0.30, 0.1)
## Long version of dataset
full_X <- model.matrix.lm(as.formula(formula), data = data, na.action = "na.pass")
out_vars <- setdiff(all.vars(formula), colnames(full_X))
cont_out_var <- setdiff(out_vars, ordinal_outcome)
data$row_num <- 1:nrow(data)
data$pat_idx_num <- dense_rank(data$pat_idx)
## Extract matrices for multiplication of random effects
full_Z <- matrix(rep(1, nrow(data)), ncol = 1)
if (random_slope) {
full_Z <- cbind(full_Z, full_X[, time_var, drop = FALSE])
}
full_Z_kron <- kronecker(diag(rep(1, length(out_vars))), full_Z)
## Max number of observations
max_obs <- data %>%
group_by(pat_idx) %>%
summarise(N = n()) %>%
ungroup() %>%
select(N) %>%
unlist() %>%
max()
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
nsim <- 250
nsim <- 200
nsim <- 400
burn_in<- 200
## Long version of dataset
full_X <- model.matrix.lm(as.formula(formula), data = data, na.action = "na.pass")
out_vars <- setdiff(all.vars(formula), colnames(full_X))
cont_out_var <- setdiff(out_vars, ordinal_outcome)
data$row_num <- 1:nrow(data)
data$pat_idx_num <- dense_rank(data$pat_idx)
## Extract matrices for multiplication of random effects
full_Z <- matrix(rep(1, nrow(data)), ncol = 1)
if (random_slope) {
full_Z <- cbind(full_Z, full_X[, time_var, drop = FALSE])
}
full_Z_kron <- kronecker(diag(rep(1, length(out_vars))), full_Z)
## Max number of observations
max_obs <- data %>%
group_by(pat_idx) %>%
summarise(N = n()) %>%
ungroup() %>%
select(N) %>%
unlist() %>%
max()
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = T,
time_var = time_var, ar_cov = F,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
colMeans(samps$res_accept)
get_DIC(samps)
get_waic_ar(samps)$estim
burn_in <- 500
nsim <- 1500
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = T,
time_var = time_var, ar_cov = F,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
get_DIC(samps)
get_waic_ar(samps)$estim
if(!ar_cov) samps$res_ar[] <- 0
sum(get_loocv(samps, cv_locs = 1:nrow(data), z_true, y_true,
full_X, full_Z_kron, data, ar = F)) * 2
ar_cov
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = T,
time_var = time_var, ar_cov = F,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
get_DIC(samps)
get_waic_ar(samps)$estim
sum(get_loocv(samps, cv_locs = 1:nrow(data), z_true, y_true,
full_X, full_Z_kron, data, ar = F)) * 2
random_slope
sim_data <- gen_ar_errors(N = 6, N_pat = 55, unequal = F, seed = 4,
slope = T, ar_cov = T)
crossprod(sim_data$alpha) / nrow(sim_data$alpha)
crossprod(MASS::mvrnorm(100, mu = c(0, 0, 0, 0) ,Sigma = sim_data$sig_alpha)) / 100
formula = cbind(y_ord, y2) ~ time; data = sim_data$data;
ordinal_outcome = "y_ord"; patient_var = "pat_idx";
random_slope = F; time_var = "time"; ar_cov = F;
burn_in = 250; nsim = 750; thin = 1; seed = 3;
verbose = TRUE; sig_prior = 1000000000; sd_vec = c(0.15, 0.30, 0.1)
sd_vec = c(0.12, 0.30, 0.1)
full_X <- model.matrix.lm(as.formula(formula), data = data, na.action = "na.pass")
out_vars <- setdiff(all.vars(formula), colnames(full_X))
cont_out_var <- setdiff(out_vars, ordinal_outcome)
data$row_num <- 1:nrow(data)
data$pat_idx_num <- dense_rank(data$pat_idx)
## Extract matrices for multiplication of random effects
full_Z <- matrix(rep(1, nrow(data)), ncol = 1)
if (random_slope) {
full_Z <- cbind(full_Z, full_X[, time_var, drop = FALSE])
}
full_Z_kron <- kronecker(diag(rep(1, length(out_vars))), full_Z)
## Max number of observations
max_obs <- data %>%
group_by(pat_idx) %>%
summarise(N = n()) %>%
ungroup() %>%
select(N) %>%
unlist() %>%
max()
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
burn_in <- 150
nsim <- 300
full_X <- model.matrix.lm(as.formula(formula), data = data, na.action = "na.pass")
out_vars <- setdiff(all.vars(formula), colnames(full_X))
cont_out_var <- setdiff(out_vars, ordinal_outcome)
data$row_num <- 1:nrow(data)
data$pat_idx_num <- dense_rank(data$pat_idx)
## Extract matrices for multiplication of random effects
full_Z <- matrix(rep(1, nrow(data)), ncol = 1)
if (random_slope) {
full_Z <- cbind(full_Z, full_X[, time_var, drop = FALSE])
}
full_Z_kron <- kronecker(diag(rep(1, length(out_vars))), full_Z)
## Max number of observations
max_obs <- data %>%
group_by(pat_idx) %>%
summarise(N = n()) %>%
ungroup() %>%
select(N) %>%
unlist() %>%
max()
## Folds
set.seed(seed)
folds <- kfold_split_stratified(max(max_obs, 10), data$pat_idx)
data$folds <- folds
cv_mat <- matrix(NA, nrow = nrow(data), ncol = length(out_vars))
z_true = data[, ordinal_outcome]
y_true <- data[, cont_out_var]
i <- 1
for(i in 1:max(folds)) {
data_tmp <- data
cv_locs <- which(data$folds == i)
data_tmp <- data[data$folds != i, ]
samps <- baseline_bmr(formula = formula, data = data_tmp,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = random_slope,
time_var = time_var, ar_cov = ar_cov,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
if(!ar_cov) samps$res_ar[] <- 0
cv_mat[cv_locs, 1] <- get_loocv(samps, cv_locs, z_true, y_true, full_X,
full_Z_kron, data, ar = F)
print(i)
print(colMeans(samps$res_accept))
print(sum(cv_mat[, 1], na.rm = T) * 2)
}
samps <- baseline_bmr(formula = formula, data = data,
ordinal_outcome = ordinal_outcome,
patient_var = patient_var,
random_slope = F,
time_var = time_var, ar_cov = F,
burn_in = burn_in, nsim = nsim, thin = thin,
seed = seed,
sd_vec = sd_vec)
get_DIC(samps)
get_waic_ar(samps)$estim
ordinal::clmm(y_ord ~ time + (1|pat_idx), data = data)
omxMnor
library(OpenMx)
mat <- matrix(rnorm(9), 3)
covmat <- crossprod(mat)
omxMnor(covariance = covmat, lbound = c(1, 2, -Inf), ubound = c(3, 4, Inf), means = c(2, 3, 4))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat, lbound = c(1, 2, -Inf), ubound = c(3, 4, Inf), means = c(2, 3, 4))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat, lbound = c(1, 2, -Inf), ubound = c(3, 4, 100), means = c(2, 3, 4))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat, lbound = c(1, 2, -Inf), ubound = c(3, 4, 5), means = c(2, 3, 4))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
omxMnor(covariance = covmat, lbound = c(1, 2, -Inf), ubound = c(3, 4, 8), means = c(2, 3, 4))
omxMnor(covariance = covmat[1:2, 1:2], lbound = c(1, 2), ubound = c(3, 4), means = c(2, 3))
library(devtools)
load_all()
library(bmrarm)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\Nick\\Dropbox\\_Thesis\\bmrvar\\run_apps_sims")
burn <- 2000
sims <- 10000
N_pat <- 48
i <- 1
options(warn = 2)
## Same data
for(i in 1:4){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = 36, slope = T, unequal = T,
ar_cov = T)
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 1, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_sim_same", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(i)
}
colMeans(samps$res_accept)
