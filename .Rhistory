full_mod$res_ar <- c(mod_list[[1]]$samps$res_ar, mod_list[[2]]$samps$res_ar,
mod_list[[3]]$samps$res_ar, mod_list[[4]]$samps$res_ar)
full_mod$res_y <- abind::abind(mod_list[[1]]$samps$res_y,
mod_list[[2]]$samps$res_y,
mod_list[[3]]$samps$res_y,
mod_list[[4]]$samps$res_y, along = 3)
full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$res_pat_eff,
mod_list[[2]]$samps$res_pat_eff,
mod_list[[3]]$samps$res_pat_eff,
mod_list[[4]]$samps$res_pat_eff, along = 3)
summary(mcmc(full_mod$res_ar))
bmrarm:::get_DIC_ar(full_mod, marginal = T)
library(magrittr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(coda)
library(ggmcmc)
library(xtable)
setwd("C:\\Users\\Nick\\Dropbox\\_Thesis\\bmrvar\\long_sims")
source("../run_apps_sims//helper_functions.R")
## Collect objects
max_mod <- 4
mod_list <- list()
obs <- c(1:max_mod)
for(i in 1:length(obs)){
mod_list[[i]] <- readRDS(paste0("Z:\\bmrarm\\samples\\leish_data_slope_model_siw_small", i, ".RDS"))
print(mod_list[[i]]$runtime)
}
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$res_beta <- cbind(mod_list[[1]]$samps$res_beta,
mod_list[[2]]$samps$res_beta,
mod_list[[3]]$samps$res_beta,
mod_list[[4]]$samps$res_beta)
full_mod$res_pat_sig <- cbind(mod_list[[1]]$samps$res_pat_sig,
mod_list[[2]]$samps$res_pat_sig,
mod_list[[3]]$samps$res_pat_sig,
mod_list[[4]]$samps$res_pat_sig)
full_mod$res_sigma <- cbind(mod_list[[1]]$samps$res_sigma,
mod_list[[2]]$samps$res_sigma,
mod_list[[3]]$samps$res_sigma,
mod_list[[4]]$samps$res_sigma)
full_mod$res_cuts <- cbind(mod_list[[1]]$samps$res_cuts,
mod_list[[2]]$samps$res_cuts,
mod_list[[3]]$samps$res_cuts,
mod_list[[4]]$samps$res_cuts)
full_mod$res_ar <- c(mod_list[[1]]$samps$res_ar, mod_list[[2]]$samps$res_ar,
mod_list[[3]]$samps$res_ar, mod_list[[4]]$samps$res_ar)
full_mod$res_y <- abind::abind(mod_list[[1]]$samps$res_y,
mod_list[[2]]$samps$res_y,
mod_list[[3]]$samps$res_y,
mod_list[[4]]$samps$res_y, along = 3)
full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$res_pat_eff,
mod_list[[2]]$samps$res_pat_eff,
mod_list[[3]]$samps$res_pat_eff,
mod_list[[4]]$samps$res_pat_eff, along = 3)
summary(mcmc(full_mod$res_ar))
## Collect objects
max_mod <- 4
mod_list <- list()
obs <- c(1:max_mod)
for(i in 1:length(obs)){
mod_list[[i]] <- readRDS(paste0("Z:\\bmrarm\\samples\\leish_data_slope_model_siw_small", i, ".RDS"))
print(mod_list[[i]]$runtime)
}
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$res_beta <- cbind(mod_list[[1]]$samps$res_beta,
mod_list[[2]]$samps$res_beta,
mod_list[[3]]$samps$res_beta,
mod_list[[4]]$samps$res_beta)
full_mod$res_pat_sig <- cbind(mod_list[[1]]$samps$res_pat_sig,
mod_list[[2]]$samps$res_pat_sig,
mod_list[[3]]$samps$res_pat_sig,
mod_list[[4]]$samps$res_pat_sig)
full_mod$res_sigma <- cbind(mod_list[[1]]$samps$res_sigma,
mod_list[[2]]$samps$res_sigma,
mod_list[[3]]$samps$res_sigma,
mod_list[[4]]$samps$res_sigma)
full_mod$res_cuts <- cbind(mod_list[[1]]$samps$res_cuts,
mod_list[[2]]$samps$res_cuts,
mod_list[[3]]$samps$res_cuts,
mod_list[[4]]$samps$res_cuts)
full_mod$res_ar <- c(mod_list[[1]]$samps$res_ar, mod_list[[2]]$samps$res_ar,
mod_list[[3]]$samps$res_ar, mod_list[[4]]$samps$res_ar)
full_mod$res_y <- abind::abind(mod_list[[1]]$samps$res_y,
mod_list[[2]]$samps$res_y,
mod_list[[3]]$samps$res_y,
mod_list[[4]]$samps$res_y, along = 3)
full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$res_pat_eff,
mod_list[[2]]$samps$res_pat_eff,
mod_list[[3]]$samps$res_pat_eff,
mod_list[[4]]$samps$res_pat_eff, along = 3)
summary(mcmc(full_mod$res_ar))
## Extended X matrix
X_extend <- mod_list[[1]]$data %>%
group_by(ID) %>%
filter(time == max(time)) %>%
slice(rep(1, each = 4)) %>%
mutate(time = time + row_number(), log_sla = NA, leish_model = NA) %>%
rbind(mod_list[[1]]$data) %>%
ungroup() %>%
arrange(ID, time) %>%
mutate(forecast = as.numeric(is.na(log_sla) & is.na(leish_model)))
## Extended Z kron
Z <- matrix(rep(1, nrow(X_extend)), ncol = 1)
Z <- cbind(Z, X_extend$time)
Z_kron_for <- kronecker(diag(rep(1, 2)), Z)
X_for <- cbind(1, select(X_extend, treatment, time, age_ind, log_dpp, hunt_M, hunt_W))
full_mod$Z_kron_for <- Z_kron_for
full_mod$X_for <- X_for
full_mod$pat_long_for <- X_extend$pat_idx
samps <- full_mod
## Get slope forecasts
all_preds <- get_forecasts(full_mod)
saveRDS(all_preds, "./leish_forecasts_slope.RDS")
saveRDS(all_preds, "./leish_forecasts_slope.RDS")
## Get slope forecasts
#all_preds <- get_forecasts(full_mod)
#saveRDS(all_preds, "./leish_forecasts_slope.RDS")
all_preds_slope <- readRDS("./leish_forecasts_slope.RDS")
## Get slope forecasts
#all_preds <- get_forecasts(full_mod)
#saveRDS(all_preds, "./leish_forecasts_slope.RDS")
all_preds_slope <- readRDS("./leish_forecasts_slope.RDS")
n_samp <- length(all_preds)
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
all_preds_slope[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
print(i)
}
X_extend$sla_pred <- X_extend$sla_025 <- X_extend$sla_975 <-
X_extend$slope_pred <- X_extend$slope_025 <- X_extend$slope_975 <-
X_extend$pred0 <- X_extend$pred1 <- X_extend$pred2 <- X_extend$pred3 <-  NA
X_extend$sla_pred[X_extend$forecast == 1] <- rowMeans(all_preds_keep)
X_extend$sla_025[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.025))
X_extend$sla_975[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.975))
X_extend$slope_pred[X_extend$forecast == 1] <- rowMeans(all_preds_slope)
X_extend$slope_025[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.025))
X_extend$slope_975[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.975))
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 4) +
geom_point(aes(x = time, y = slope_pred)size = 4) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
dat_plot <- filter(X_extend, pat_idx %in% c(2, 4, 6, 8, 9, 10, 11, 14, 15))  %>%
mutate(pat_idx = paste0("Patient ", toupper(letters[dense_rank(pat_idx)])),
Type = ifelse(is.na(sla_pred), "Observation", "Prediction"),
sla_pred = coalesce(sla_pred, log_sla))
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 4) +
geom_point(aes(x = time, y = slope_pred), size = 4) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
View(dat_plot)
n_samp <- length(all_preds)
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
all_preds_slope[, i] <- as.numeric(t(all_preds_slope[[i]][[1]][,2, ]))
print(i)
}
all_preds_slope[[i]]
all_preds_slope
dim(all_preds_slope)
## Get slope forecasts
#all_preds <- get_forecasts(full_mod)
#saveRDS(all_preds, "./leish_forecasts_slope.RDS")
all_preds_slope <- readRDS("./leish_forecasts_slope.RDS")
n_samp <- length(all_preds)
## Get slope forecasts
#all_preds <- get_forecasts(full_mod)
#saveRDS(all_preds, "./leish_forecasts_slope.RDS")
all_preds_sl <- readRDS("./leish_forecasts_slope.RDS")
n_samp <- length(all_preds)
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
all_preds_slope[, i] <- as.numeric(t(all_preds_sl[[i]][[1]][,2, ]))
print(i)
}
X_extend$sla_pred <- X_extend$sla_025 <- X_extend$sla_975 <-
X_extend$slope_pred <- X_extend$slope_025 <- X_extend$slope_975 <-
X_extend$pred0 <- X_extend$pred1 <- X_extend$pred2 <- X_extend$pred3 <-  NA
X_extend$sla_pred[X_extend$forecast == 1] <- rowMeans(all_preds_keep)
X_extend$sla_025[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.025))
X_extend$sla_975[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.975))
X_extend$slope_pred[X_extend$forecast == 1] <- rowMeans(all_preds_slope)
X_extend$slope_025[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.025))
X_extend$slope_975[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.975))
View(X_extend)
all_preds_sl[[i]][[1]][, 2, ]
all_preds[[i]][[1]][, 2, ]
full_mod$res_ar
full_mod$res_beta <- full_mod$res_beta[, 1:200]
all_preds_sl <- get_forecasts(full_mod)
saveRDS(all_preds_sl, "./leish_forecasts_slope.RDS")
all_preds_sl <- readRDS("./leish_forecasts_slope.RDS")
n_samp <- length(all_preds)
n_samp <- 200
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
all_preds_slope[, i] <- as.numeric(t(all_preds_sl[[i]][[1]][,2, ]))
print(i)
}
X_extend$sla_pred <- X_extend$sla_025 <- X_extend$sla_975 <-
X_extend$slope_pred <- X_extend$slope_025 <- X_extend$slope_975 <-
X_extend$pred0 <- X_extend$pred1 <- X_extend$pred2 <- X_extend$pred3 <-  NA
X_extend$sla_pred[X_extend$forecast == 1] <- rowMeans(all_preds_keep)
X_extend$sla_025[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.025))
X_extend$sla_975[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.975))
X_extend$slope_pred[X_extend$forecast == 1] <- rowMeans(all_preds_slope)
X_extend$slope_025[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.025))
X_extend$slope_975[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.975))
View(X_extend)
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 4) +
geom_point(aes(x = time, y = slope_pred), size = 4) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
dat_plot <- filter(X_extend, pat_idx %in% c(2, 4, 6, 8, 9, 10, 11, 14, 15))  %>%
mutate(pat_idx = paste0("Patient ", toupper(letters[dense_rank(pat_idx)])),
Type = ifelse(is.na(sla_pred), "Observation", "Prediction"),
sla_pred = coalesce(sla_pred, log_sla))
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 4) +
geom_point(aes(x = time, y = slope_pred), size = 4) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 4) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 1) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 1, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 1, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BFC2') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 1, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#7CAE00') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 1, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#00BFC4') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BA38') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 1) +
geom_point(aes(x = time, y = slope_pred), size = 1, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#619CFF') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BA38') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 2) +
geom_point(aes(x = time, y = slope_pred), size = 2, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#619CFF') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BA38') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
setwd("C:\\Users\\Nick\\Dropbox\\_Thesis\\bmrvar\\long_sims")
source("../run_apps_sims//helper_functions.R")
## Collect objects
max_mod <- 4
mod_list <- list()
obs <- c(1:max_mod)
for(i in 1:length(obs)){
mod_list[[i]] <- readRDS(paste0("Z:\\bmrarm\\samples\\leish_data_slope_model_siw_small", i, ".RDS"))
print(mod_list[[i]]$runtime)
}
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$res_beta <- cbind(mod_list[[1]]$samps$res_beta,
mod_list[[2]]$samps$res_beta,
mod_list[[3]]$samps$res_beta,
mod_list[[4]]$samps$res_beta)
full_mod$res_pat_sig <- cbind(mod_list[[1]]$samps$res_pat_sig,
mod_list[[2]]$samps$res_pat_sig,
mod_list[[3]]$samps$res_pat_sig,
mod_list[[4]]$samps$res_pat_sig)
full_mod$res_sigma <- cbind(mod_list[[1]]$samps$res_sigma,
mod_list[[2]]$samps$res_sigma,
mod_list[[3]]$samps$res_sigma,
mod_list[[4]]$samps$res_sigma)
full_mod$res_cuts <- cbind(mod_list[[1]]$samps$res_cuts,
mod_list[[2]]$samps$res_cuts,
mod_list[[3]]$samps$res_cuts,
mod_list[[4]]$samps$res_cuts)
full_mod$res_ar <- c(mod_list[[1]]$samps$res_ar, mod_list[[2]]$samps$res_ar,
mod_list[[3]]$samps$res_ar, mod_list[[4]]$samps$res_ar)
full_mod$res_y <- abind::abind(mod_list[[1]]$samps$res_y,
mod_list[[2]]$samps$res_y,
mod_list[[3]]$samps$res_y,
mod_list[[4]]$samps$res_y, along = 3)
full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$res_pat_eff,
mod_list[[2]]$samps$res_pat_eff,
mod_list[[3]]$samps$res_pat_eff,
mod_list[[4]]$samps$res_pat_eff, along = 3)
summary(mcmc(full_mod$res_ar))
## Get slope forecasts
set.seed(1)
all_preds_sl <- get_forecasts(full_mod)
## Extended X matrix
X_extend <- mod_list[[1]]$data %>%
group_by(ID) %>%
filter(time == max(time)) %>%
slice(rep(1, each = 4)) %>%
mutate(time = time + row_number(), log_sla = NA, leish_model = NA) %>%
rbind(mod_list[[1]]$data) %>%
ungroup() %>%
arrange(ID, time) %>%
mutate(forecast = as.numeric(is.na(log_sla) & is.na(leish_model)))
## Extended Z kron
Z <- matrix(rep(1, nrow(X_extend)), ncol = 1)
Z <- cbind(Z, X_extend$time)
Z_kron_for <- kronecker(diag(rep(1, 2)), Z)
X_for <- cbind(1, select(X_extend, treatment, time, age_ind, log_dpp, hunt_M, hunt_W))
full_mod$Z_kron_for <- Z_kron_for
full_mod$X_for <- X_for
full_mod$pat_long_for <- X_extend$pat_idx
samps <- full_mod
set.seed(1)
all_preds_sl <- get_forecasts(full_mod)
saveRDS(all_preds_sl, "./leish_forecasts_slope.RDS")
n_samp <- length(all_preds)
n_samp <- 200
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
#full_mod$res_beta <- full_mod$res_beta[, 1:200]
#all_preds <- get_forecasts(full_mod)
#saveRDS(all_preds, "./leish_forecasts.RDS")
all_preds <- readRDS("./leish_forecasts.RDS")
n_samp <- length(all_preds)
n_samp <- 200
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
all_preds_slope[, i] <- as.numeric(t(all_preds_sl[[i]][[1]][,2, ]))
print(i)
}
n_samp <- length(all_preds)
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
all_preds_slope[, i] <- as.numeric(t(all_preds_sl[[i]][[1]][,2, ]))
print(i)
}
X_extend$sla_pred <- X_extend$sla_025 <- X_extend$sla_975 <-
X_extend$slope_pred <- X_extend$slope_025 <- X_extend$slope_975 <-
X_extend$pred0 <- X_extend$pred1 <- X_extend$pred2 <- X_extend$pred3 <-  NA
X_extend$sla_pred[X_extend$forecast == 1] <- rowMeans(all_preds_keep)
X_extend$sla_025[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.025))
X_extend$sla_975[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
function(x) quantile(x, 0.975))
X_extend$slope_pred[X_extend$forecast == 1] <- rowMeans(all_preds_slope)
X_extend$slope_025[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.025))
X_extend$slope_975[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
function(x) quantile(x, 0.975))
View(X_extend)
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 2) +
geom_point(aes(x = time, y = slope_pred), size = 2, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#619CFF') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BA38') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
dat_plot <- filter(X_extend, pat_idx %in% c(2, 4, 6, 8, 9, 10, 11, 14, 15))  %>%
mutate(pat_idx = paste0("Patient ", toupper(letters[dense_rank(pat_idx)])),
Type = ifelse(is.na(sla_pred), "Observation", "Prediction"),
sla_pred = coalesce(sla_pred, log_sla))
ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
geom_point(size = 2) +
geom_point(aes(x = time, y = slope_pred), size = 2, col = 2) +
geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#619CFF') +
geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BA38') +
facet_wrap(.~ pat_idx) +
theme_bw() +
theme(text = element_text(size=18)) +
ylab("Log Anti-SLA") +
xlab("Time from Baseline")
library(LaplacesDemon)
arr1 <- arr2 <- arr3 <- arr4 <- array(NA, dim = c(4, 4, 10000))
for(i in 1:10000) {
arr1[,, i] <- rinvwishart(4, diag(4))
arr3[,, i] <- cov2cor(arr1[,, i])
uni <- runif(4, 0.2, 5)
arr2[,, i] <-diag(uni) %*% rinvwishart(5, diag(4)) %*% diag(uni)
arr4[,, i] <- cov2cor(arr2[,, i])
}
par(mfrow=c(1,2))
plot(density(arr1[1,1, ], from = 0, to = 10), lwd = 3, main = expression("Prior Density of " ~ Sigma[alpha][11]),
ylim = c(0, 0.2))
lines(density(arr2[1,1, ], from = 0, to = 10), col = 2, lwd = 3, lty = 2)
legend("topright", legend = c("IW(I, 4)", "SIW(I, 5, 0.2, 5)"), lty = c(1, 2), col = c(1, 2), lwd = 3, cex = 1.1)
hist(arr3[3,1, ], col = "black", border = F, xlab = "Correlation",
main = expression("Implied Prior on Correlations"))
hist(arr4[3,1, ], col=scales::alpha('red',.5), add = T, bord = F)
hist(arr3[1,1, ], col = "black", border = F, xlab = "Correlation",
main = expression("Implied Prior on Correlations"))
hist(arr1[1,1, ], col = "black", border = F, xlab = "Correlation",
main = expression("Implied Prior on Correlations"))
par(mfrow=c(1,2))
plot(density(arr1[1,1, ], from = 0, to = 10), lwd = 3, main = expression("Prior Density of " ~ Sigma[alpha][11]),
ylim = c(0, 0.2))
lines(density(arr2[1,1, ], from = 0, to = 10), col = 2, lwd = 3, lty = 2)
legend("topright", legend = c("IW(I, 4)", "SIW(I, 5, 0.2, 5)"), lty = c(1, 2), col = c(1, 2), lwd = 3, cex = 1.1)
plot(density(log(arr1[1,1, ]), from = -10, to = 10), lwd = 3, main = expression("Prior Density of " ~ Sigma[alpha][11]),
ylim = c(0, 0.2))
lines(density(log(arr2[1,1, ]), from = -10, to = 10), col = 2, lwd = 3, lty = 2)
plot(density(log(arr1[1,1, ]), from = -10, to = 10), lwd = 3, main = expression("Prior Density of " ~ Sigma[alpha][11]))
lines(density(log(arr2[1,1, ]), from = -10, to = 10), col = 2, lwd = 3, lty = 2)
arr1 <- arr2 <- arr3 <- arr4 <- array(NA, dim = c(4, 4, 10000))
for(i in 1:10000) {
arr1[,, i] <- rinvwishart(4, diag(4))
arr3[,, i] <- cov2cor(arr1[,, i])
uni <- runif(4, 0.1, 10)
arr2[,, i] <-diag(uni) %*% rinvwishart(5, diag(4)) %*% diag(uni)
arr4[,, i] <- cov2cor(arr2[,, i])
}
plot(density(log(arr1[1,1, ]), from = -10, to = 10), lwd = 3, main = expression("Prior Density of " ~ Sigma[alpha][11]))
lines(density(log(arr2[1,1, ]), from = -10, to = 10), col = 2, lwd = 3, lty = 2)
hist(arr1[1,1, ], xlim = c(0, 10))
hist(arr1[1,1, ], xlim = c(0, 10), breaks = 100)
hist(arr1[1,1, ], xlim = c(0, 10), breaks = 1000)
