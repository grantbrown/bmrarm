burn <- 1000
sims <- 4000
## Slope and Intercept model
dic_mat_slope[] <- NA
for(i in 1:N_iter){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = F)
sim_data$data <- sim_data$data %>%
filter(!is.na(y2) | !is.na(y_ord))
# DIC for each modeling type ----------------------------------------------
## Intercept only model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_int_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(dic_mat_slope[i, 1] <- get_DIC(samps)[1])
## Intercept and slope model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_slope_model_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(dic_mat_slope[i, 2] <- get_DIC(samps)[1])
## Intercept, slope, and AIC
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_ar_model_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(mean(samps$res_ar))
print(dic_mat_slope[i, 3] <- get_DIC_ar(samps)[1])
# Cross validation for each modeling type ---------------------------------
# ## Intercept only model
# samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
#                 ordinal_outcome = "y_ord", patient_var = "pat_idx",
#                 random_slope = F, time_var = "time", ar_cov = F,
#                 burn_in = burn, nsim = sims, thin = 5, seed = i,
#                 sd_vec = c(0.15, 0.15))
# dic_mat_slope[i, 4] <- -2 * samps$sum_cv_vals
#
# ## Intercept and slope model
# samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
#                 ordinal_outcome = "y_ord", patient_var = "pat_idx",
#                 random_slope = T, time_var = "time", ar_cov = F,
#                 burn_in = burn, nsim = sims, thin = 5, seed = i,
#                 sd_vec = c(0.15, 0.15))
# dic_mat_slope[i, 5] <- -2 * samps$sum_cv_vals
#
#
# ## Intercept, slope, and AIC
# samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
#                 ordinal_outcome = "y_ord", patient_var = "pat_idx",
#                 random_slope = T, time_var = "time", ar_cov = T,
#                 burn_in = burn, nsim = sims, thin = 5, seed = i,
#                 sd_vec = c(0.15, 0.15))
# dic_mat_slope[i, 6] <- -2 * samps$sum_cv_vals
# print(dic_mat_slope)
}
burn <- 200
sims <- 500
## Slope and Intercept model
dic_mat_slope[] <- NA
for(i in 1:N_iter){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = F)
sim_data$data <- sim_data$data %>%
filter(!is.na(y2) | !is.na(y_ord))
# DIC for each modeling type ----------------------------------------------
## Intercept only model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_int_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(dic_mat_slope[i, 1] <- get_DIC(samps)[1])
## Intercept and slope model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_slope_model_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(dic_mat_slope[i, 2] <- get_DIC(samps)[1])
## Intercept, slope, and AIC
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_ar_model_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(mean(samps$res_ar))
print(dic_mat_slope[i, 3] <- get_DIC_ar(samps)[1])
# Cross validation for each modeling type ---------------------------------
## Intercept only model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 4] <- -2 * samps$sum_cv_vals
## Intercept and slope model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 5] <- -2 * samps$sum_cv_vals
## Intercept, slope, and AIC
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 6] <- -2 * samps$sum_cv_vals
print(dic_mat_slope)
}
load_all()
setwd("C:/Users/nicho/Dropbox/_Thesis/bmrvar/packages/bmrarm")
load_all()
baseline_bmr
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\nicho\\Dropbox\\_Thesis\\bmrvar\\run_apps_sims")
burn <- 2000
sims <- 10000
N_pat <- 48
N_iter <- 10
i <- 1
options(warn = 1)
dic_mat_slope <- matrix(NA, ncol = 6, nrow = N_iter)
colnames(dic_mat_slope) <- c("int_dic", "slope_dic", "ar_dic",
"int_cv", "slope_cv", "ar_cv")
## Slope and Intercept model
for(i in 7:N_iter){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = T)
sim_data$data <- sim_data$data %>%
filter(!is.na(y2) | !is.na(y_ord))
# DIC for each modeling type ----------------------------------------------
## Intercept only model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_int_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 1] <- get_DIC(samps)[1]
## Intercept and slope model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_slope_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 2] <- get_DIC(samps)[1]
get_DIC(samps)
## Intercept, slope, and AIC
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_ar_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 3] <- get_DIC_ar(samps)[1]
# Cross validation for each modeling type ---------------------------------
# Intercept only model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 4] <- -2 * samps$sum_cv_vals
## Intercept and slope model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 5] <- -2 * samps$sum_cv_vals
## Intercept, slope, and AIC
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 6] <- -2 * samps$sum_cv_vals
print(dic_mat_slope)
}
burn <- 2000
sims <- 10000
N_pat <- 48
N_iter <- 10
i <- 1
options(warn = 1)
dic_mat_slope <- matrix(NA, ncol = 6, nrow = N_iter)
colnames(dic_mat_slope) <- c("int_dic", "slope_dic", "ar_dic",
"int_cv", "slope_cv", "ar_cv")
## Slope and Intercept model
for(i in 1:N_iter){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = T)
sim_data$data <- sim_data$data %>%
filter(!is.na(y2) | !is.na(y_ord))
# DIC for each modeling type ----------------------------------------------
## Intercept only model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_int_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 1] <- get_DIC(samps)[1]
## Intercept and slope model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_slope_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 2] <- get_DIC(samps)[1]
get_DIC(samps)
## Intercept, slope, and AIC
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_ar_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 3] <- get_DIC_ar(samps)[1]
# Cross validation for each modeling type ---------------------------------
# Intercept only model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 4] <- -2 * samps$sum_cv_vals
## Intercept and slope model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 5] <- -2 * samps$sum_cv_vals
## Intercept, slope, and AIC
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 6] <- -2 * samps$sum_cv_vals
print(dic_mat_slope)
}
burn <- 750
sims <- 2500
N_pat <- 48
N_iter <- 10
i <- 1
options(warn = 1)
dic_mat_slope <- matrix(NA, ncol = 6, nrow = N_iter)
colnames(dic_mat_slope) <- c("int_dic", "slope_dic", "ar_dic",
"int_cv", "slope_cv", "ar_cv")
## Slope and Intercept model
for(i in 1:N_iter){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = T)
sim_data$data <- sim_data$data %>%
filter(!is.na(y2) | !is.na(y_ord))
# DIC for each modeling type ----------------------------------------------
## Intercept only model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_int_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 1] <- get_DIC(samps)[1]
## Intercept and slope model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_slope_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 2] <- get_DIC(samps)[1]
get_DIC(samps)
## Intercept, slope, and AIC
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_ar_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
dic_mat_slope[i, 3] <- get_DIC_ar(samps)[1]
# Cross validation for each modeling type ---------------------------------
# Intercept only model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 4] <- -2 * samps$sum_cv_vals
## Intercept and slope model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 5] <- -2 * samps$sum_cv_vals
## Intercept, slope, and AIC
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 6] <- -2 * samps$sum_cv_vals
print(dic_mat_slope)
}
write.csv(dic_mat_slope, "./../long_sims/chapter3_sims_select.csv", row.names = F)
dic_mat_slope_keep <- dic_mat_slope
## Slope and Intercept model
dic_mat_slope[] <- NA
for(i in 1:N_iter){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = F)
sim_data$data <- sim_data$data %>%
filter(!is.na(y2) | !is.na(y_ord))
# DIC for each modeling type ----------------------------------------------
## Intercept only model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_int_model_ar_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(dic_mat_slope[i, 1] <- get_DIC(samps)[1])
## Intercept and slope model
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_slope_model_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(dic_mat_slope[i, 2] <- get_DIC(samps)[1])
## Intercept, slope, and AIC
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_select_ar_model_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(mean(samps$res_ar))
print(dic_mat_slope[i, 3] <- get_DIC_ar(samps)[1])
# Cross validation for each modeling type ---------------------------------
## Intercept only model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = F, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 4] <- -2 * samps$sum_cv_vals
## Intercept and slope model
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 5] <- -2 * samps$sum_cv_vals
## Intercept, slope, and AIC
samps <- bmr_cv(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = T,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
dic_mat_slope[i, 6] <- -2 * samps$sum_cv_vals
print(dic_mat_slope)
}
write.csv(dic_mat_slope, "./../long_sims/chapter3_sims_select_slope.csv", row.names = F)
setwd("C:/Users/nicho/Dropbox/_Thesis/bmrvar/packages/bmrarm")
load_all()
burn <- 1000
sims <- 5000
dic_res <- rep(0, 6)
data <- read.csv("C:\\Users\\nicho\\Dropbox\\_Thesis\\bmrvar\\store_apps_sims//leish_modeling_data.csv") %>%
mutate(true_log_sla = log_sla, true_leish = leish_model,
time = time + 1,
pat_idx = dense_rank(as.factor(ID)),
age_ind = as.numeric(age_model == "3-11 years old"),
hunt_M = as.numeric(Hunt == "M"),
hunt_W = as.numeric(Hunt == "W")) %>%
filter(!is.na(log_sla) | !is.na(leish_model)) %>%
as.data.frame()
data$log_dpp <- log(data$DPP_Enroll)
data$time <- data$time - 1
document()
## Intercept and slope model
samps <- bmr_cv(formula = cbind(leish_model, log_sla) ~ time + age_ind + log_dpp + hunt_M + hunt_W,
data = data, ordinal_outcome = "leish_model", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = 4,
sd_vec = c(0.15, 0.15))
document()
## Intercept and slope model
samps <- bmr_cv(formula = cbind(leish_model, log_sla) ~ time + age_ind + log_dpp + hunt_M + hunt_W,
data = data, ordinal_outcome = "leish_model", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = 4,
sd_vec = c(0.15, 0.15))
docuemtn()
document()
## Intercept and slope model
samps <- bmr_cv(formula = cbind(leish_model, log_sla) ~ time + age_ind + log_dpp + hunt_M + hunt_W,
data = data, ordinal_outcome = "leish_model", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = 4,
sd_vec = c(0.15, 0.15))
burn <- 2000
sims <- 10000
## Intercept and slope model
samps <- bmr_cv(formula = cbind(leish_model, log_sla) ~ time + age_ind + log_dpp + hunt_M + hunt_W,
data = data, ordinal_outcome = "leish_model", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = 4,
sd_vec = c(0.15, 0.15))
burn <- 2000
sims <- 10000
N_pat <- 48
i <- 1
options(warn = 2)
## Different data
for(i in 1:250){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = F)
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_sim_slope_with_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(i)
}
setwd("C:\\Users\\nicho\\Dropbox\\_Thesis\\bmrvar\\run_apps_sims")
burn <- 2000
sims <- 10000
N_pat <- 48
i <- 1
options(warn = 2)
## Different data
for(i in 1:250){
start_time <- Sys.time()
sim_data <- bmrarm:::gen_ar_errors(7, N_pat, seed = i, slope = T, unequal = T,
ar_cov = F)
samps <- baseline_bmr(formula = cbind(y_ord, y2) ~ time, data = sim_data$data,
ordinal_outcome = "y_ord", patient_var = "pat_idx",
random_slope = T, time_var = "time", ar_cov = F,
burn_in = burn, nsim = sims, thin = 5, seed = i,
sd_vec = c(0.15, 0.15))
fname <- paste0("./../long_sims/chapter3_sim_slope_with_slope_data", i, ".RDS")
saveRDS(list(samps = samps, data = sim_data,
runtime = Sys.time() - start_time), fname)
print(i)
}
