max(gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_sig[c(1, 6, 11, 16), ])),
mcmc(t(mod_list[[2]]$samps$res_pat_sig[c(1, 6, 11, 16), ])),
mcmc(t(mod_list[[3]]$samps$res_pat_sig[c(1, 6, 11, 16), ])),
mcmc(t(mod_list[[4]]$samps$res_pat_sig[c(1, 6, 11, 16), ]))))[[1]][, 2])
gelman.diag(mcmc.list(mcmc(mod_list[[1]]$samps$res_cuts[4, ]),
mcmc(mod_list[[2]]$samps$res_cuts[4, ]),
mcmc(mod_list[[3]]$samps$res_cuts[4, ]),
mcmc(mod_list[[4]]$samps$res_cuts[4, ])))[[1]][, 2]
gelman.diag(mcmc.list(mcmc(mod_list[[1]]$samps$res_cuts[5, ]),
mcmc(mod_list[[2]]$samps$res_cuts[5, ]),
mcmc(mod_list[[3]]$samps$res_cuts[5, ]),
mcmc(mod_list[[4]]$samps$res_cuts[5, ])))[[1]][, 2]
max(gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_sig[c(1, 6, 11, 16), ])),
mcmc(t(mod_list[[2]]$samps$res_pat_sig[c(1, 6, 11, 16), ])),
mcmc(t(mod_list[[3]]$samps$res_pat_sig[c(1, 6, 11, 16), ])),
mcmc(t(mod_list[[4]]$samps$res_pat_sig[c(1, 6, 11, 16), ]))))[[1]][, 2])
max(gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_sigma)),
mcmc(t(mod_list[[2]]$samps$res_sigma)),
mcmc(t(mod_list[[3]]$samps$res_sigma)),
mcmc(t(mod_list[[4]]$samps$res_sigma))), multivariate = F)[[1]][, 2])
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_cuts)),
mcmc(t(mod_list[[2]]$samps$res_cuts)),
mcmc(t(mod_list[[3]]$samps$res_cuts)),
mcmc(t(mod_list[[4]]$samps$res_cuts))), multivariate = F)[[1]]
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_sigma)),
mcmc(t(mod_list[[2]]$samps$res_sigma)),
mcmc(t(mod_list[[3]]$samps$res_sigma)),
mcmc(t(mod_list[[4]]$samps$res_sigma))), multivariate = F)[[1]]
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_sig)),
mcmc(t(mod_list[[2]]$samps$res_pat_sig)),
mcmc(t(mod_list[[3]]$samps$res_pat_sig)),
mcmc(t(mod_list[[4]]$samps$res_pat_sig))), multivariate = F)[[1]]
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_eff[,1,])),
mcmc(t(mod_list[[2]]$samps$res_pat_eff[,1,])),
mcmc(t(mod_list[[3]]$samps$res_pat_eff[,1,])),
mcmc(t(mod_list[[4]]$samps$res_pat_eff[,1,]))), multivariate = T)
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_eff[,3,])),
mcmc(t(mod_list[[2]]$samps$res_pat_eff[,3,])),
mcmc(t(mod_list[[3]]$samps$res_pat_eff[,3,])),
mcmc(t(mod_list[[4]]$samps$res_pat_eff[,3,]))), multivariate = T)
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_eff[,2,])),
mcmc(t(mod_list[[2]]$samps$res_pat_eff[,2,])),
mcmc(t(mod_list[[3]]$samps$res_pat_eff[,2,])),
mcmc(t(mod_list[[4]]$samps$res_pat_eff[,2,]))), multivariate = T)
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_pat_eff[,4,])),
mcmc(t(mod_list[[2]]$samps$res_pat_eff[,4,])),
mcmc(t(mod_list[[3]]$samps$res_pat_eff[,4,])),
mcmc(t(mod_list[[4]]$samps$res_pat_eff[,4,]))), multivariate = T)
gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_y[,1,])),
mcmc(t(mod_list[[2]]$samps$res_y[,1,])),
mcmc(t(mod_list[[3]]$samps$res_y[,1,])),
mcmc(t(mod_list[[4]]$samps$res_y[,1,]))), multivariate = F)
max(gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$res_y[,1,])),
mcmc(t(mod_list[[2]]$samps$res_y[,1,])),
mcmc(t(mod_list[[3]]$samps$res_y[,1,])),
mcmc(t(mod_list[[4]]$samps$res_y[,1,]))), multivariate = F)[[1]][, 2])
## Collect objects
max_mod <- 4
mod_list <- list()
obs <- c(1:max_mod)
for(i in 1:length(obs)){
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrarm_samples\\leish_data_ar_model", i, ".RDS"))
mod_list[[i]]$samps <- mod_list[[i]]$samps$draws
print(mod_list[[i]]$runtime)
}
mcmc_summ <- function(x) {
summ <- summary(mcmc(x))
c(paste0(round(summ[[1]][1], 3), " (", round(summ[[1]][2], 3), ")"),
paste0("(", round(summ[[2]][1], 3), ", ", round(summ[[2]][5], 3), ")"))
}
library(xtable)
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$res_beta <- cbind(mod_list[[1]]$samps$res_beta,
mod_list[[2]]$samps$res_beta,
mod_list[[3]]$samps$res_beta,
mod_list[[4]]$samps$res_beta)
full_mod$res_pat_sig <- cbind(mod_list[[1]]$samps$res_pat_sig,
mod_list[[2]]$samps$res_pat_sig,
mod_list[[3]]$samps$res_pat_sig,
mod_list[[4]]$samps$res_pat_sig)
full_mod$res_sigma <- cbind(mod_list[[1]]$samps$res_sigma,
mod_list[[2]]$samps$res_sigma,
mod_list[[3]]$samps$res_sigma,
mod_list[[4]]$samps$res_sigma)
full_mod$res_cuts <- cbind(mod_list[[1]]$samps$res_cuts,
mod_list[[2]]$samps$res_cuts,
mod_list[[3]]$samps$res_cuts,
mod_list[[4]]$samps$res_cuts)
full_mod$res_ar <- c(mod_list[[1]]$samps$res_ar, mod_list[[2]]$samps$res_ar,
mod_list[[3]]$samps$res_ar, mod_list[[4]]$samps$res_ar)
full_mod$res_y <- abind::abind(mod_list[[1]]$samps$res_y,
mod_list[[2]]$samps$res_y,
mod_list[[3]]$samps$res_y,
mod_list[[4]]$samps$res_y, along = 3)
full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$res_pat_eff,
mod_list[[2]]$samps$res_pat_eff,
mod_list[[3]]$samps$res_pat_eff,
mod_list[[4]]$samps$res_pat_eff, along = 3)
df_tab <- data.frame(outcome = c(rep("Ordinal", 13),
rep("Continuous", 11),
rep("Shared", 5)),
param = c("$\\beta_{intercept}$",
"$\\beta_{treatment}$",
"$\\beta_{time}$",
"$\\beta_{[age\\ge 3]}$",
"$\\beta_{log(dpp)}$",
"$\\beta_{[Hunt= M]}$",
"$\\beta_{[Hunt = W]}$",
"$R_{11}$",
"$\\Sigma_{\\alpha 11}$",
"$\\frac{\\Sigma_{\\alpha 12}}{\\sqrt{\\Sigma_{\\alpha 11}\\Sigma_{\\alpha 22}}}$",
"$\\Sigma_{\\alpha 22}$",
"$\\rho$",
"$\\gamma_3$",
"$\\beta_{intercept}$",
"$\\beta_{treatment}$",
"$\\beta_{time}$",
"$\\beta_{[age\\ge 3]}$",
"$\\beta_{log(dpp)}$",
"$\\beta_{[Hunt= M]}$",
"$\\beta_{[Hunt = W]}$",
"$R_{22}$",
"$\\Sigma_{\\alpha 33}$",
"$\\frac{\\Sigma_{\\alpha 34}}{\\sqrt{\\Sigma_{\\alpha 33}\\Sigma_{\\alpha 44}}}$",
"$\\Sigma_{\\alpha 44}$",
"$\\frac{R_{12}}{\\sqrt{R_{11}R_{22}}}$",
"$\\frac{\\Sigma_{\\alpha 13}}{\\sqrt{\\Sigma_{\\alpha 11}\\Sigma_{\\alpha 33}}}$",
"$\\frac{\\Sigma_{\\alpha 14}}{\\sqrt{\\Sigma_{\\alpha 11}\\Sigma_{\\alpha 44}}}$",
"$\\frac{\\Sigma_{\\alpha 23}}{\\sqrt{\\Sigma_{\\alpha 22}\\Sigma_{\\alpha 33}}}$",
"$\\frac{\\Sigma_{\\alpha 24}}{\\sqrt{\\Sigma_{\\alpha 22}\\Sigma_{\\alpha 44}}}$"),
priors = c("$N(\\mathbf{0}, \\mathbf{R}, 10^5\\mathbf{I})$", rep("", 6),
"$IW(\\mathbf{I}, 4)$",
"$SIW(\\mathbf{I}, 5, 0.2, 5)$", rep("", 2),
"$U(-1, 1)$",
"$U(0, 10^4)$",
rep("", 16)),
rbind(
## Ordinal
mcmc_summ(full_mod$res_beta[1,]),
mcmc_summ(full_mod$res_beta[2,]),
mcmc_summ(full_mod$res_beta[3,]),
mcmc_summ(full_mod$res_beta[4,]),
mcmc_summ(full_mod$res_beta[5,]),
mcmc_summ(full_mod$res_beta[6,]),
mcmc_summ(full_mod$res_beta[7,]),
mcmc_summ(full_mod$res_sigma[1,]),
mcmc_summ(full_mod$res_pat_sig[1,]),
mcmc_summ(full_mod$res_pat_sig[2,] / sqrt(full_mod$res_pat_sig[1,]) / sqrt(full_mod$res_pat_sig[6,])),
mcmc_summ(full_mod$res_pat_sig[6,]),
mcmc_summ(full_mod$res_ar),
mcmc_summ(full_mod$res_cuts[4, ]),
## Continuous
mcmc_summ(full_mod$res_beta[8,]),
mcmc_summ(full_mod$res_beta[9,]),
mcmc_summ(full_mod$res_beta[10,]),
mcmc_summ(full_mod$res_beta[11,]),
mcmc_summ(full_mod$res_beta[12,]),
mcmc_summ(full_mod$res_beta[13,]),
mcmc_summ(full_mod$res_beta[14,]),
mcmc_summ(full_mod$res_sigma[4,]),
mcmc_summ(full_mod$res_pat_sig[11,]),
mcmc_summ(full_mod$res_pat_sig[12,] / sqrt(full_mod$res_pat_sig[11,]) / sqrt(full_mod$res_pat_sig[16,])),
mcmc_summ(full_mod$res_pat_sig[16,]),
## Shared
mcmc_summ(full_mod$res_sigma[2,] / sqrt(full_mod$res_sigma[1,] * full_mod$res_sigma[4,])),
mcmc_summ(full_mod$res_pat_sig[3,] / sqrt(full_mod$res_pat_sig[1,]) / sqrt(full_mod$res_pat_sig[11,])),
mcmc_summ(full_mod$res_pat_sig[4,] / sqrt(full_mod$res_pat_sig[1,]) / sqrt(full_mod$res_pat_sig[16,])),
mcmc_summ(full_mod$res_pat_sig[7,] / sqrt(full_mod$res_pat_sig[6,]) / sqrt(full_mod$res_pat_sig[11,])),
mcmc_summ(full_mod$res_pat_sig[8,] / sqrt(full_mod$res_pat_sig[6,]) / sqrt(full_mod$res_pat_sig[16,]))))
print(xtable(df_tab[c(12:13, 1:7, 14:20, 8, 25, 21, 9:10, 26:27, 11, 28:29, 22, 23:24), c(2, 3, 1, 4, 5)], type = "latex"),
include.rownames = F, include.colnames = F, sanitize.text.function = identity,
hline.after = c(1:2, 16, 19))
View(df_tab)
## Collect objects
max_mod <- 4
mod_list <- list()
obs <- c(1:max_mod)
obs <- c(1:4)
for(i in 1:length(obs)){
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrarm_samples\\ar_model_same_data", obs[i], ".RDS"))
mod_list[[i]]$samps <- mod_list[[i]]$samps$draws
#mod_list[[i]]$samps$res_pat_sig <- mod_list[[i]]$samps$res_pat_sig_q
print(mod_list[[i]]$runtime)
#print(effectiveSize(mcmc(mod_list[[i]]$samps$res_cuts[4, ])))
}
mcmc_summ <- function(x) {
summ <- summary(mcmc(x))
c(summ[[1]][1], summ[[1]][2], summ[[2]][1], summ[[2]][5],effectiveSize(mcmc(x)))
}
gamma3 <- t(sapply(1:4, function(x) mcmc_summ(mod_list[[x]]$samps$res_cuts[4, ])))
gamma4 <- t(sapply(1:4, function(x) mcmc_summ(mod_list[[x]]$samps$res_cuts[5, ])))
sig11 <- t(sapply(1:4, function(x) mcmc_summ(mod_list[[x]]$samps$res_sigma[1, ])))
sig_alpha11 <- t(sapply(1:4, function(x) mcmc_summ(mod_list[[x]]$samps$res_pat_sig[1, ])))
sig_alpha22 <- t(sapply(1:4, function(x) mcmc_summ(mod_list[[x]]$samps$res_pat_sig[6, ])))
full_tab_res <- rbind(gamma3, gamma4, sig11, sig_alpha11, sig_alpha22)
df <- data.frame(param = c("gamma3", rep("", 3), "gamm4", rep("", 3),
"sig11", rep("", 3), "sig_alpha11", rep("", 3),
"sig_alpha22", rep("", 3)),
chain = rep(1:4, 5), full_tab_res,
gelman_rubin = c("1.010", rep("", 3), "1.015", rep("", 3),
"1.008", rep("", 3), "1.006", rep("", 3),
"1.012", rep("", 3)))
print(xtable(df, type = "latex", digits = c(1, 1, 1, 2, 3, 2, 2, 2, 1)),
include.rownames = F, include.colnames = F)
View(df_tab)
View(df)
i <- 151
j <- 151
start <- (j - 1) * 2 + 1
end <- j * 2
end
start <- (j - 1) * 2 + 1
end <- j * 2
start <- (j - 1) * 2 + 1
end <- j * 2
end
start
j <- 170
start <- (j - 1) * 2 + 1
end <- j * 2
end
setwd("C:\\Users\\Nick\\Dropbox\\_Thesis\\bmrvar\\long_sims")
source("../run_apps_sims//helper_functions.R")
res_eta <- read.csv("./chapter3_sims_ar_res.csv")
res_eta2 <- read.csv("./chapter3_sims_slope_res.csv")
library(xtable)
res_filt <- filter(res_eta, substring(parameter, 1, 4) != "alph")
mean(res_filt$cover)
mean(res_eta$cover)
res_filt <- filter(res_eta, substring(parameter, 1, 4) != "alph")
library(dplyr)
res_filt <- filter(res_eta, substring(parameter, 1, 4) != "alph")
mean(res_filt$cover)
res_eta <- sum_res(all_res)
mean(res_eta$cover)
res_filt <- filter(res_eta, substring(parameter, 1, 4) != "alph")
mean(res_filt$cover)
res_filt2 <- filter(res_eta, substring(parameter, 1, 4) == "alph")
mean(res_filt2$cover)
res_eta2 <- sum_res(all_res2) %>%
filter(parameter != "ar_1")
mean(res_eta2$cover)
res_filt <- filter(res_eta2, substring(parameter, 1, 4) != "alph")
mean(res_filt$cover)
res_filt2 <- filter(res_eta2, substring(parameter, 1, 4) == "alph")
mean(res_filt2$cover)
res_eta <- read.csv("./chapter3_ar_res.csv")
res_eta2 <- read.csv("./chapter3_sims_slope_res.csv")
tab1 <- filter(res_eta, substring(parameter, 1, 4) != "alph")
res_eta <- read.csv("./chapter3_sims_ar_res.csv")
res_eta2 <- read.csv("./chapter3_sims_slope_res.csv")
tab1 <- filter(res_eta, substring(parameter, 1, 4) != "alph")
tab2 <- filter(res_eta2, substring(parameter, 1, 4) != "alph")
colnames(tab2)[2:11] <- paste0(colnames(tab2)[2:11], "2")
full <- left_join(tab1[, c(1, 2, 11, 7, 5, 8)],
tab2[, c(1, 11, 7, 5, 8)], by = "parameter") %>%
mutate(sig_alpha_ind = parameter %in%
setdiff(paste0("sig_alpha", 1:16),
paste0("sig_alpha", c(1, 6, 11, 16))),
sig_ind = ifelse(sig_alpha_ind, "g", parameter)) %>%
group_by(sig_ind) %>%
summarise_each(mean, -parameter)
full_sort <- full[c(2:5, 13:15, 9:12, 6:7, 8, 1), -c(6, 10, 11)]
## Param_names
param = c("$\\beta_{11}$",
"$\\beta_{21}$",
"$\\beta_{12}$",
"$\\beta_{22}$",
"$\\Sigma_{11}$",
"$\\Sigma_{21}$",
"$\\Sigma_{22}$",
"$\\Sigma_{\\alpha 11}$",
"$\\Sigma_{\\alpha 22}$",
"$\\Sigma_{\\alpha 33}$",
"$\\Sigma_{\\alpha 44}$",
"$\\gamma_4$",
"$\\gamma_5$",
"$\\Sigma_{\\alpha }\\text{ Covariances}$",
"$\\rho$")
full_sort$sig_ind <- param
print(xtable(full_sort, type = "latex", digits = c(1, 1, 2, 3, 3, 3,
3, 3, 3)),
include.rownames = F, include.colnames = F, sanitize.text.function = identity)
View(tab1)
test()
setwd("C:/Users/Nick/Dropbox/_Thesis/bmrvar/packages/bmrarm")
library(devtools)
test()
test()
test()
document()
sim_data <- gen_single(N = 400, seed = 10, N_param = 3)
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
document()
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
document()
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
document()
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
document()
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
document()
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
document()
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
document()
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
document()
samps_one <- bmrvarx(formula = cbind(y2, y3, y_ord) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord"), thin = 1,
max_iter_rej = 10000000)
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
test()
document()
samps_two <- bmrvarx(formula = cbind(y3, y_ord, y_ord2) ~ x1,
data = sim_data$data, nsim = 400, burn_in = 200,
seed = 1,
ordinal_outcomes = c("y_ord", "y_ord2"), thin = 1,
max_iter_rej = 10000000)
samps_two$rej_sampler_tracker
chwkc <- samps_two$rej_sampler_tracker
View(chwkc)
document()
## Collect objects
max_mod <- 4
mod_list <- mod_list_da <- list()
for(i in 1:max_mod){
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_with_tracking", i, ".RDS"))
mod_list[[i]]$samps <- mod_list[[i]]$samps$draws
mod_list_da[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_da_with_tracking", i, ".RDS"))
mod_list_da[[i]]$samps <- mod_list_da[[i]]$samps$draws
print(mod_list[[i]]$runtime)
print(mod_list_da[[i]]$runtime)
}
mod_list[[1]]$runtime
mod_list_da[[1]]$runtime
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_with_tracking", i, ".RDS"))
i <- 1
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_with_tracking", i, ".RDS"))
mod_list[[i]]$samps$rej_sampler_tracker
mean(mod_list[[i]]$samps$rej_sampler_tracker, na.rm = T)
mod_list_da[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_da_with_tracking", i, ".RDS"))
mean(mod_list_da[[i]]$samps$rej_sampler_tracker, na.rm = T)
sum(mod_list_da[[i]]$samps$rej_sampler_tracker == 501, na.rm = T)
sum(mod_list[[i]]$samps$rej_sampler_tracker == 501, na.rm = T)
tmp <- read.csv(paste0("Z:\\final_bmrarm\\bmrarm_samples\\select_sim", i, ".csv"))
tmp
times <- matrix(NA, nrow = N, ncol = 3)
N <- 400
# Proposed Model results --------------------------------------------------
res_ar <- res_slope <- matrix(NA, nrow = N, ncol = 12)
times <- matrix(NA, nrow = N, ncol = 3)
tmp$time
N <- 400
# Proposed Model results --------------------------------------------------
res_ar <- res_slope <- matrix(NA, nrow = N, ncol = 12)
times <- matrix(NA, nrow = N, ncol = 3)
for(i in 1:N){
tmp <- read.csv(paste0("Z:\\final_bmrarm\\bmrarm_samples\\select_sim", i, ".csv"))
times[i, ] <- tmp$time[1:3]
## Results for the AR data
res_ar[i, 1:3] <- tmp$cDIC[1:3]
res_ar[i, 4:6] <- tmp$mDIC[1:3]
res_ar[i, 7] <- which.min(tmp$cDIC[1:3])
res_ar[i, 8] <- which.min(tmp$mDIC[1:3])
res_ar[i, 9] <- tmp$rho[3]
res_ar[i, 10] <- as.numeric((tmp$mDIC[2] - tmp$mDIC[3]) > 2)
res_ar[i, 11] <- as.numeric((tmp$cDIC[2] - tmp$cDIC[3]) > 2)
res_slope[i, 1:3] <- tmp$cDIC[4:6]
res_slope[i, 4:6] <- tmp$mDIC[4:6]
res_slope[i, 7] <- which.min(tmp$cDIC[4:6])
res_slope[i, 8] <- which.min(tmp$mDIC[4:6])
res_slope[i, 9] <- tmp$rho[6]
res_slope[i, 10] <- as.numeric((tmp$mDIC[5] - tmp$mDIC[6]) > 2)
res_slope[i, 11] <- as.numeric((tmp$cDIC[5] - tmp$cDIC[6]) > 2)
print(i)
}
apply(times, 2, median)
i <- 1
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_with_tracking", i, ".RDS"))
rej[[i]] <- mod_list[[i]]$samps$rej_sampler_tracker
rej <- rej_da <- list()
rej[[i]] <- mod_list[[i]]$samps$rej_sampler_tracker
mean(rej[[1]])
mean(rej[[1]], na.rm = T)
## Collect objects
max_mod <- 4
mod_list <- mod_list_da <- rej <- rej_da <- list()
for(i in 1:max_mod){
mod_list[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_with_tracking", i, ".RDS"))
rej[[i]] <- mod_list[[i]]$samps$rej_sampler_tracker
mod_list[[i]]$samps <- mod_list[[i]]$samps$draws
mod_list_da[[i]] <- readRDS(paste0("Z:\\final_bmrarm\\bmrvarx_samples\\bmrvarx_same_da_with_tracking", i, ".RDS"))
rej_da[[i]] <- mod_list_da[[i]]$samps$rej_sampler_tracker
mod_list_da[[i]]$samps <- mod_list_da[[i]]$samps$draws
print(mod_list[[i]]$runtime)
print(mod_list_da[[i]]$runtime)
}
mean(c(mod_list[[1]]$runtime, mod_list[[2]]$runtime,
mod_list[[3]]$runtime, mod_list[[4]]$runtime))
mean(c(mod_list_da[[1]]$runtime, mod_list_da[[2]]$runtime,
mod_list_da[[3]]$runtime, mod_list_da[[4]]$runtime))
sum(c(rej[[1]] == 501, rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T)
sum(c(rej_da[[1]] == 501, rej_da[[2]] == 501, rej_da[[3]] == 501, rej_da[[4]] == 501), na.rm = T)
mean(c(rej[[1]], rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T) -
mean(c(rej[[1]] == 501, rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T)
mean(c(rej_da[[1]], rej_da[[2]], rej_da[[3]], rej_da[[4]]), na.rm = T) -
mean(c(rej_da[[1]] == 501, rej_da[[2]] == 501, rej_da[[3]] == 501, rej_da[[4]] == 501), na.rm = T)
mean(c(rej[[1]], rej[[2]], rej[[3]], rej[[4]]), na.rm = T) -
mean(c(rej[[1]] == 501, rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T)
mean(c(rej_da[[1]], rej_da[[2]], rej_da[[3]], rej_da[[4]]), na.rm = T) -
mean(c(rej_da[[1]] == 501, rej_da[[2]] == 501, rej_da[[3]] == 501, rej_da[[4]] == 501), na.rm = T)
mean(sum(c(rej[[1]] == 501, rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T) ) * 100
mean(c(rej[[1]] == 501, rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T) * 100
mean(c(rej_da[[1]] == 501, rej_da[[2]] == 501, rej_da[[3]] == 501, rej_da[[4]] == 501), na.rm = T) * 100
median(c(rej[[1]], rej[[2]], rej[[3]], rej[[4]]), na.rm = T) -
mean(c(rej[[1]] == 501, rej[[2]] == 501, rej[[3]] == 501, rej[[4]] == 501), na.rm = T)
median(c(rej_da[[1]], rej_da[[2]], rej_da[[3]], rej_da[[4]]), na.rm = T) -
mean(c(rej_da[[1]] == 501, rej_da[[2]] == 501, rej_da[[3]] == 501, rej_da[[4]] == 501), na.rm = T)
mean(c(mod_list[[1]]$runtime, mod_list[[2]]$runtime,
mod_list[[3]]$runtime, mod_list[[4]]$runtime))
mean(c(mod_list_da[[1]]$runtime, mod_list_da[[2]]$runtime,
mod_list_da[[3]]$runtime, mod_list_da[[4]]$runtime))
gelman.diag(mcmc.list(mcmc(mod_list[[1]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[2]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[3]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[4]]$samps$res_cuts[3,, 1])))[[1]][, 2]
library(coda)
gelman.diag(mcmc.list(mcmc(mod_list[[1]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[2]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[3]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[4]]$samps$res_cuts[3,, 1])))[[1]][, 2]
gelman.diag(mcmc.list(mcmc(mod_list_da[[1]]$samps$res_cuts[4, , 1]),
mcmc(mod_list_da[[2]]$samps$res_cuts[4, ,1 ]),
mcmc(mod_list_da[[3]]$samps$res_cuts[4, , 1]),
mcmc(mod_list_da[[4]]$samps$res_cuts[4, , 1])))[[1]][, 2]
effectiveSize(mcmc.list(mcmc(mod_list[[1]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[2]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[3]]$samps$res_cuts[3,, 1]),
mcmc(mod_list[[4]]$samps$res_cuts[3,, 1]))) / 4
effectiveSize(mcmc.list(mcmc(mod_list_da[[1]]$samps$res_cuts[4, , 1]),
mcmc(mod_list_da[[2]]$samps$res_cuts[4, ,1 ]),
mcmc(mod_list_da[[3]]$samps$res_cuts[4, , 1]),
mcmc(mod_list_da[[4]]$samps$res_cuts[4, , 1]))) / 4
mean(c(mod_list[[1]]$runtime, mod_list[[2]]$runtime,
mod_list[[3]]$runtime, mod_list[[4]]$runtime))
mean(c(mod_list_da[[1]]$runtime, mod_list_da[[2]]$runtime,
mod_list_da[[3]]$runtime, mod_list_da[[4]]$runtime))
