mod_list[[2]]$samps$draws$res_pat_sig[6, ],
mod_list[[3]]$samps$draws$res_pat_sig[6, ],
mod_list[[4]]$samps$draws$res_pat_sig[6, ]))
## Traceplot
g14_trace <- ggplot(g14_df, aes(x = Iterations, y = Value, color = Chain)) +
geom_line() +
theme_bw() +
guides(color = FALSE) +
ylab(expression(Sigma[alpha][22])) +
annotate(geom = "text", x = Inf, y = Inf, hjust = 1.02, vjust = 1.1,
label = paste0("GR Upper CI = ", round(g14_gr, 3))) +
ggtitle(expression("Traceplot:" ~ Sigma[alpha][22])) +
theme(plot.title = element_text(hjust = 0.5))
## Density plot
g14_density <- ggplot(g14_df) +
geom_density(aes(x = Value, color = Chain), size = 1.2) +
theme_bw() +
ylab("Density") +
ggtitle(expression("Density Plot:" ~ Sigma[alpha][22])) +
theme(plot.title = element_text(hjust = 0.5))
g_cuts <- grid.arrange(g13_trace, g13_density, g14_trace, g14_density)
g_cuts
gr_cuts <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_cuts[4:5, ])),
mcmc(t(mod_list[[2]]$samps$draws$res_cuts[4:5, ])),
mcmc(t(mod_list[[3]]$samps$draws$res_cuts[4:5, ])),
mcmc(t(mod_list[[4]]$samps$draws$res_cuts[4:5, ]))),
autoburnin = F, multivariate = F)[[1]][, 2]
gr_latent <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_y[, 1, ])),
mcmc(t(mod_list[[2]]$samps$draws$res_y[, 1, ])),
mcmc(t(mod_list[[3]]$samps$draws$res_y[, 1, ])),
mcmc(t(mod_list[[4]]$samps$draws$res_y[, 1, ]))),
autoburnin = F)[[1]][, 2]
gr_sig <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_sigma)),
mcmc(t(mod_list[[2]]$samps$draws$res_sigma)),
mcmc(t(mod_list[[3]]$samps$draws$res_sigma)),
mcmc(t(mod_list[[4]]$samps$draws$res_sigma))),
multivariate = F, autoburnin = F)[[1]][, 2]
gr_pat_sig <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_sig)),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_sig)),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_sig)),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_sig))),
multivariate = F, autoburnin = F)[[1]][, 2]
gr_beta <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_beta)),
mcmc(t(mod_list[[2]]$samps$draws$res_beta)),
mcmc(t(mod_list[[3]]$samps$draws$res_beta)),
mcmc(t(mod_list[[4]]$samps$draws$res_beta))), multivariate = F,
autoburnin = F)[[1]][, 2]
gr_pat_eff1 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,1,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,1,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,1,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,1,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
gr_pat_eff2 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,2,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,2,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,2,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,2,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
gr_pat_eff3 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,3,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,3,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,3,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,3,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
gr_pat_eff4 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,4,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,4,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,4,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,4,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
# Maximum GR Upper CI over all parameters ------------------------------------
max(c(gr_cuts, gr_latent, gr_sig, gr_pat_sig, gr_beta,
gr_pat_eff1, gr_pat_eff2, gr_pat_eff3, gr_pat_eff4))
gr_cuts
gr_cuts <- gelman.diag(
mcmc.list(mcmc(mod_list[[1]]$samps$draws$res_cuts[4, ]),
mcmc(mod_list[[2]]$samps$draws$res_cuts[4, ]),
mcmc(mod_list[[3]]$samps$draws$res_cuts[4, ]),
mcmc(mod_list[[4]]$samps$draws$res_cuts[4, ])),
autoburnin = F, multivariate = F)[[1]][, 2]
gr_latent <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_y[, 1, ])),
mcmc(t(mod_list[[2]]$samps$draws$res_y[, 1, ])),
mcmc(t(mod_list[[3]]$samps$draws$res_y[, 1, ])),
mcmc(t(mod_list[[4]]$samps$draws$res_y[, 1, ]))),
autoburnin = F)[[1]][, 2]
gr_sig <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_sigma)),
mcmc(t(mod_list[[2]]$samps$draws$res_sigma)),
mcmc(t(mod_list[[3]]$samps$draws$res_sigma)),
mcmc(t(mod_list[[4]]$samps$draws$res_sigma))),
multivariate = F, autoburnin = F)[[1]][, 2]
gr_pat_sig <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_sig)),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_sig)),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_sig)),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_sig))),
multivariate = F, autoburnin = F)[[1]][, 2]
gr_beta <- gelman.diag(mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_beta)),
mcmc(t(mod_list[[2]]$samps$draws$res_beta)),
mcmc(t(mod_list[[3]]$samps$draws$res_beta)),
mcmc(t(mod_list[[4]]$samps$draws$res_beta))), multivariate = F,
autoburnin = F)[[1]][, 2]
gr_pat_eff1 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,1,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,1,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,1,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,1,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
gr_pat_eff2 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,2,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,2,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,2,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,2,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
gr_pat_eff3 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,3,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,3,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,3,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,3,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
gr_pat_eff4 <- gelman.diag(
mcmc.list(mcmc(t(mod_list[[1]]$samps$draws$res_pat_eff[,4,])),
mcmc(t(mod_list[[2]]$samps$draws$res_pat_eff[,4,])),
mcmc(t(mod_list[[3]]$samps$draws$res_pat_eff[,4,])),
mcmc(t(mod_list[[4]]$samps$draws$res_pat_eff[,4,]))),
multivariate = T, autoburnin = F)[[1]][, 2]
# Maximum GR Upper CI over all parameters ------------------------------------
max(c(gr_cuts, gr_latent, gr_sig, gr_pat_sig, gr_beta,
gr_pat_eff1, gr_pat_eff2, gr_pat_eff3, gr_pat_eff4))
gr_cuts
gr_latent
# Maximum GR Upper CI over all parameters ------------------------------------
max(c(gr_cuts, gr_latent, gr_sig, gr_pat_sig, gr_beta,
gr_pat_eff1, gr_pat_eff2, gr_pat_eff3, gr_pat_eff4))
gr_latent
gr_sig
gr_pat_sig
gr_beta
max(gr_latent)
# Maximum GR Upper CI over all parameters ------------------------------------
max(c(gr_cuts, max(gr_latent), gr_sig, gr_pat_sig, gr_beta,
gr_pat_eff1, gr_pat_eff2, gr_pat_eff3, gr_pat_eff4))
# Make table of posterior estimates ---------------------------------------
mcmc_summ <- function(x) {
summ <- summary(mcmc(x))
c(paste0(round(summ[[1]][1], 3), " (", round(summ[[1]][2], 3), ")"),
paste0("(", round(summ[[2]][1], 3), ", ", round(summ[[2]][5], 3), ")"))
}
library(xtable)
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$res_beta <- cbind(mod_list[[1]]$samps$draws$res_beta,
mod_list[[2]]$samps$draws$res_beta,
mod_list[[3]]$samps$draws$res_beta,
mod_list[[4]]$samps$draws$res_beta)
full_mod$res_pat_sig <- cbind(mod_list[[1]]$samps$draws$res_pat_sig,
mod_list[[2]]$samps$draws$res_pat_sig,
mod_list[[3]]$samps$draws$res_pat_sig,
mod_list[[4]]$samps$draws$res_pat_sig)
full_mod$res_sigma <- cbind(mod_list[[1]]$samps$draws$res_sigma,
mod_list[[2]]$samps$draws$res_sigma,
mod_list[[3]]$samps$draws$res_sigma,
mod_list[[4]]$samps$draws$res_sigma)
full_mod$res_cuts <- cbind(mod_list[[1]]$samps$draws$res_cuts,
mod_list[[2]]$samps$draws$res_cuts,
mod_list[[3]]$samps$draws$res_cuts,
mod_list[[4]]$samps$draws$res_cuts)
full_mod$res_ar <- c(mod_list[[1]]$samps$draws$res_ar, mod_list[[2]]$samps$draws$res_ar,
mod_list[[3]]$samps$draws$res_ar, mod_list[[4]]$samps$draws$res_ar)
full_mod$res_y <- abind::abind(mod_list[[1]]$samps$draws$res_y,
mod_list[[2]]$samps$draws$res_y,
mod_list[[3]]$samps$draws$res_y,
mod_list[[4]]$samps$draws$res_y, along = 3)
full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$draws$res_pat_eff,
mod_list[[2]]$samps$draws$res_pat_eff,
mod_list[[3]]$samps$draws$res_pat_eff,
mod_list[[4]]$samps$draws$res_pat_eff, along = 3)
df_tab <- data.frame(outcome = c(rep("Ordinal", 13),
rep("Continuous", 11),
rep("Shared", 5)),
param = c("$\\beta_{intercept}$",
"$\\beta_{treatment}$",
"$\\beta_{time}$",
"$\\beta_{[age\\ge 3]}$",
"$\\beta_{log(dpp)}$",
"$\\beta_{[Hunt= M]}$",
"$\\beta_{[Hunt = W]}$",
"$R_{11}$",
"$\\Sigma_{\\alpha 11}$",
"$\\frac{\\Sigma_{\\alpha 12}}{\\sqrt{\\Sigma_{\\alpha 11}\\Sigma_{\\alpha 22}}}$",
"$\\Sigma_{\\alpha 22}$",
"$\\rho$",
"$\\gamma_3$",
"$\\beta_{intercept}$",
"$\\beta_{treatment}$",
"$\\beta_{time}$",
"$\\beta_{[age\\ge 3]}$",
"$\\beta_{log(dpp)}$",
"$\\beta_{[Hunt= M]}$",
"$\\beta_{[Hunt = W]}$",
"$R_{22}$",
"$\\Sigma_{\\alpha 33}$",
"$\\frac{\\Sigma_{\\alpha 34}}{\\sqrt{\\Sigma_{\\alpha 33}\\Sigma_{\\alpha 44}}}$",
"$\\Sigma_{\\alpha 44}$",
"$\\frac{R_{12}}{\\sqrt{R_{11}R_{22}}}$",
"$\\frac{\\Sigma_{\\alpha 13}}{\\sqrt{\\Sigma_{\\alpha 11}\\Sigma_{\\alpha 33}}}$",
"$\\frac{\\Sigma_{\\alpha 14}}{\\sqrt{\\Sigma_{\\alpha 11}\\Sigma_{\\alpha 44}}}$",
"$\\frac{\\Sigma_{\\alpha 23}}{\\sqrt{\\Sigma_{\\alpha 22}\\Sigma_{\\alpha 33}}}$",
"$\\frac{\\Sigma_{\\alpha 24}}{\\sqrt{\\Sigma_{\\alpha 22}\\Sigma_{\\alpha 44}}}$"),
priors = c("$N(\\mathbf{0}, \\mathbf{R}, 10^5\\mathbf{I})$", rep("", 6),
"$IW(\\mathbf{I}, 4)$",
"$SIW(\\mathbf{I}, 5, 0.2, 5)$", rep("", 2),
"$U(-1, 1)$",
"$U(0, 10^4)$",
rep("", 16)),
rbind(
## Ordinal
mcmc_summ(full_mod$draws$res_beta[1,]),
mcmc_summ(full_mod$draws$res_beta[2,]),
mcmc_summ(full_mod$draws$res_beta[3,]),
mcmc_summ(full_mod$draws$res_beta[4,]),
mcmc_summ(full_mod$draws$res_beta[5,]),
mcmc_summ(full_mod$draws$res_beta[6,]),
mcmc_summ(full_mod$draws$res_beta[7,]),
mcmc_summ(full_mod$draws$res_sigma[1,]),
mcmc_summ(full_mod$draws$res_pat_sig[1,]),
mcmc_summ(full_mod$draws$res_pat_sig[2,] / sqrt(full_mod$draws$res_pat_sig[1,]) / sqrt(full_mod$draws$res_pat_sig[6,])),
mcmc_summ(full_mod$draws$res_pat_sig[6,]),
mcmc_summ(full_mod$draws$res_ar),
mcmc_summ(full_mod$draws$res_cuts[4, ]),
## Continuous
mcmc_summ(full_mod$draws$res_beta[8,]),
mcmc_summ(full_mod$draws$res_beta[9,]),
mcmc_summ(full_mod$draws$res_beta[10,]),
mcmc_summ(full_mod$draws$res_beta[11,]),
mcmc_summ(full_mod$draws$res_beta[12,]),
mcmc_summ(full_mod$draws$res_beta[13,]),
mcmc_summ(full_mod$draws$res_beta[14,]),
mcmc_summ(full_mod$draws$res_sigma[4,]),
mcmc_summ(full_mod$draws$res_pat_sig[11,]),
mcmc_summ(full_mod$draws$res_pat_sig[12,] / sqrt(full_mod$draws$res_pat_sig[11,]) / sqrt(full_mod$draws$res_pat_sig[16,])),
mcmc_summ(full_mod$draws$res_pat_sig[16,]),
## Shared
mcmc_summ(full_mod$draws$res_sigma[2,] / sqrt(full_mod$draws$res_sigma[1,] * full_mod$draws$res_sigma[4,])),
mcmc_summ(full_mod$draws$res_pat_sig[3,] / sqrt(full_mod$draws$res_pat_sig[1,]) / sqrt(full_mod$draws$res_pat_sig[11,])),
mcmc_summ(full_mod$draws$res_pat_sig[4,] / sqrt(full_mod$draws$res_pat_sig[1,]) / sqrt(full_mod$draws$res_pat_sig[16,])),
mcmc_summ(full_mod$draws$res_pat_sig[7,] / sqrt(full_mod$draws$res_pat_sig[6,]) / sqrt(full_mod$draws$res_pat_sig[11,])),
mcmc_summ(full_mod$draws$res_pat_sig[8,] / sqrt(full_mod$draws$res_pat_sig[6,]) / sqrt(full_mod$draws$res_pat_sig[16,]))))
print(xtable(df_tab[c(12:13, 1:7, 14:20, 8, 25, 21, 9:10, 26:27, 11, 28:29, 22, 23:24), c(2, 3, 1, 4, 5)], type = "latex"),
include.rownames = F, include.colnames = F, sanitize.text.function = identity,
hline.after = c(1:2, 16, 19))
library(dplyr)
library(ggplot2)
library(bmrarm)
library(tidyr)
library(coda)
library(xtable)
library(gridExtra)
get_dic_using_all_chains <- function(mod_list) {
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$draws$res_beta <- cbind(mod_list[[1]]$samps$draws$res_beta,
mod_list[[2]]$samps$draws$res_beta,
mod_list[[3]]$samps$draws$res_beta,
mod_list[[4]]$samps$draws$res_beta)
full_mod$draws$res_pat_sig <- cbind(mod_list[[1]]$samps$draws$res_pat_sig,
mod_list[[2]]$samps$draws$res_pat_sig,
mod_list[[3]]$samps$draws$res_pat_sig,
mod_list[[4]]$samps$draws$res_pat_sig)
full_mod$draws$res_sigma <- cbind(mod_list[[1]]$samps$draws$res_sigma,
mod_list[[2]]$samps$draws$res_sigma,
mod_list[[3]]$samps$draws$res_sigma,
mod_list[[4]]$samps$draws$res_sigma)
full_mod$draws$res_cuts <- cbind(mod_list[[1]]$samps$draws$res_cuts,
mod_list[[2]]$samps$draws$res_cuts,
mod_list[[3]]$samps$draws$res_cuts,
mod_list[[4]]$samps$draws$res_cuts)
full_mod$draws$res_ar <- c(mod_list[[1]]$samps$draws$res_ar, mod_list[[2]]$samps$draws$res_ar,
mod_list[[3]]$samps$draws$res_ar, mod_list[[4]]$samps$draws$res_ar)
full_mod$draws$res_y <- abind::abind(mod_list[[1]]$samps$draws$res_y,
mod_list[[2]]$samps$draws$res_y,
mod_list[[3]]$samps$draws$res_y,
mod_list[[4]]$samps$draws$res_y, along = 3)
full_mod$draws$res_pat_eff <- abind::abind(mod_list[[1]]$samps$draws$res_pat_eff,
mod_list[[2]]$samps$draws$res_pat_eff,
mod_list[[3]]$samps$draws$res_pat_eff,
mod_list[[4]]$samps$draws$res_pat_eff, along = 3)
get_DIC(full_mod)
}
setwd("C:\\Users\\Nick\\Dropbox\\_Thesis\\Longitudinal Paper/")
## Collect objects
mod_list_ar <- mod_list_int <- mod_list_slope <- list()
for(i in 1:4){
mod_list_ar[[i]] <- readRDS(paste0("./Fitted Objects\\leish_data_ar_model", i, ".RDS"))
mod_list_int[[i]] <- readRDS(paste0("./Fitted Objects\\leish_data_int_model_siw", i, ".RDS"))
mod_list_slope[[i]] <- readRDS(paste0("./Fitted Objects\\leish_data_slope_model", i, ".RDS"))
}
get_dic_using_all_chains(mod_list_ar)
get_dic_using_all_chains(mod_list_int) ##
get_dic_using_all_chains(mod_list_slope) ##
make_full_mod <- function(mod_list) {
full_mod <- mod_list[[1]]$samps
## Combined into a single model for DIC
full_mod$draws$res_beta <- cbind(mod_list[[1]]$samps$draws$res_beta,
mod_list[[2]]$samps$draws$res_beta,
mod_list[[3]]$samps$draws$res_beta,
mod_list[[4]]$samps$draws$res_beta)
full_mod$draws$res_pat_sig <- cbind(mod_list[[1]]$samps$draws$res_pat_sig,
mod_list[[2]]$samps$draws$res_pat_sig,
mod_list[[3]]$samps$draws$res_pat_sig,
mod_list[[4]]$samps$draws$res_pat_sig)
full_mod$draws$res_sigma <- cbind(mod_list[[1]]$samps$draws$res_sigma,
mod_list[[2]]$samps$draws$res_sigma,
mod_list[[3]]$samps$draws$res_sigma,
mod_list[[4]]$samps$draws$res_sigma)
full_mod$draws$res_cuts <- cbind(mod_list[[1]]$samps$draws$res_cuts,
mod_list[[2]]$samps$draws$res_cuts,
mod_list[[3]]$samps$draws$res_cuts,
mod_list[[4]]$samps$draws$res_cuts)
full_mod$draws$res_ar <- c(mod_list[[1]]$samps$draws$res_ar, mod_list[[2]]$samps$draws$res_ar,
mod_list[[3]]$samps$draws$res_ar, mod_list[[4]]$samps$draws$res_ar)
full_mod$draws$res_y <- abind::abind(mod_list[[1]]$samps$draws$res_y,
mod_list[[2]]$samps$draws$res_y,
mod_list[[3]]$samps$draws$res_y,
mod_list[[4]]$samps$draws$res_y, along = 3)
full_mod$draws$res_pat_eff <- abind::abind(mod_list[[1]]$samps$draws$res_pat_eff,
mod_list[[2]]$samps$draws$res_pat_eff,
mod_list[[3]]$samps$draws$res_pat_eff,
mod_list[[4]]$samps$draws$res_pat_eff, along = 3)
full_mod
}
get_DIC(make_full_mod(mod_list_ar)) ## DIC = 899.02441, D = 873.54448, pd = 25.47994, dev_of_means =  848.06454
get_DIC(make_full_mod(mod_list_int)) ## DIC = 942.6380, D = 920.8582, pd = 21.7798, dev_of_means =  899.0784
get_DIC(make_full_mod(mod_list_slope)) ## DIC = 902.12182, D = 876.87601, pd = 25.24581, dev_of_means =  851.63020
full_mod <- make_full_mod(mod_list_ar)
all_preds <- get_pred(full_mod)
all_preds <- bmrarm:::get_preds_bmrarm(full_mod)
all_preds <- bmrarm:::get_pred(full_mod)
saveRDS(all_preds, "./Fitted Objects//leish_posterior_preds.RDS")
library(bayesplot)
saveRDS(all_preds, "./Fitted Objects//leish_posterior_preds.RDS")
#saveRDS(all_preds, "./Fitted Objects//leish_posterior_preds.RDS")
all_preds <- readRDS("./leish_posterior_preds.RDS")
#saveRDS(all_preds, "./Fitted Objects//leish_posterior_preds.RDS")
all_preds <- readRDS("./Fitted Objects//leish_posterior_preds.RDS")
data <- mod_list_ar[[1]]$data
n_samp <- length(all_preds)
res <- matrix(NA, nrow = 3, ncol = n_samp)
for(i in 1:n_samp){
data$leish_pred <- all_preds[[i]]$all_preds[, 1]
dat_group <- group_by(data, ID) %>%
filter(!is.na(leish_model)) %>%
summarise(num_trans = sum(leish_pred != lag(leish_pred), na.rm = T),
num_unique = length(unique(leish_pred))) %>%
ungroup() %>%
mutate(trans_cat = ifelse(num_trans == 0, 0,
ifelse(num_trans <= 2, 1, 2)))
## Number of transitions
res_tmp <-
group_by(dat_group, trans_cat) %>%
summarise(n(), round(n() / 48 * 100, 3))
if(min(res_tmp$trans_cat) == 1) {
res[, i] <- c(0, res_tmp$`n()`)
} else {
res[, i] <- res_tmp$`n()`
}
if(i %% 100 == 0) print(i)
}
## Bayesian p-values for the ordinal data
mean(res[1, ] >= 8, na.rm = T)
round(summary(mcmc(res[1, ]))[[2]][c(1, 5)] / 48 * 100, 1)
mean(res[2, ] >= 25, na.rm = T)
round(summary(mcmc(res[2, ]))[[2]][c(1, 5)] / 48 * 100, 1)
mean(res[3, ] >= 15, na.rm = T)
round(summary(mcmc(res[3, ]))[[2]][c(1, 5)] / 48 * 100, 1)
res[1, ] >= 8
8/48
res2 <- matrix(NA, nrow = 5, ncol = n_samp)
dat_last <- filter(data, time + 1 == max_not_na)
all_preds_keep <- matrix(NA, 48, n_samp)
for(i in 1:n_samp){
dat_last$log_sla_pred <- all_preds[[i]]$last_preds[, 2]
all_preds_keep[, i] <- all_preds[[i]]$last_preds[, 2]
dat_group <- dat_last %>%
summarise(mean(log_sla_pred),
median(log_sla_pred),
sd(log_sla_pred),
min(log_sla_pred),
max(log_sla_pred))
res2[, i] <- unlist(dat_group)
if(i %% 100 == 0) print(i)
}
mean(res2[1, ] >= mean(dat_last$log_sla, na.rm = T))
mean(res2[2, ] >= median(dat_last$log_sla, na.rm = T))
mean(res2[3, ] >= sd(dat_last$log_sla, na.rm = T))
mean(res2[2, ] >= median(dat_last$log_sla, na.rm = T))
mean(res2[2, ] >= median(dat_last$log_sla, na.rm = T))
mean(res2[3, ] >= sd(dat_last$log_sla, na.rm = T))
mean(res2[4, ] >= min(dat_last$log_sla, na.rm = T))
mean(res2[5, ] >= max(dat_last$log_sla, na.rm = T))
mean(res2[2, ] >= median(dat_last$log_sla, na.rm = T))
mean(res2[3, ] >= sd(dat_last$log_sla, na.rm = T))
mean(res2[4, ] >= min(dat_last$log_sla, na.rm = T))
mean(res2[5, ] >= max(dat_last$log_sla, na.rm = T))
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)
bayesplot_grid(p1, p2, p3, p4)
ggsave("./Summary Objects/fig11.eps", bayesplot_grid(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
grid.arrange(p1, p2, p3, p4)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
color_scheme_set(scheme = "blue")
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p1
color_scheme_set(scheme = "green")
p1
color_scheme_set(scheme = "pink")
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p1
color_scheme_set(scheme = "green")
color_scheme_set(scheme = "green")
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
theme_default(
base_size = getOption("bayesplot.base_size", 12),
base_family = getOption("bayesplot.base_family", "sans")
)
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median', family = "sans") +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
color_scheme_set(scheme = "blue")
color_scheme_set(scheme = "blue")
bayesplot_theme_set(theme_default(base_family = "sans"))
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
install.packages("extrafont")
bayesplot_theme_set(theme_default(base_family = "mono"))
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
library(extrafont)
font_import()
loadfonts(device = "postscript")
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
fonts()
bayesplot_theme_set(theme_default(base_family = "Times"))
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
warnings()
dat_last$log_sla
ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median')
dat_last$log_sla
color_scheme_set(scheme = "blue")
bayesplot_theme_set(theme_default(base_family = "serif"))
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median')
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min')
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max')
ggsave("./Summary Objects/fig11.eps", grid.arrange(p1, p2, p3, p4),
width = 20, height = 11, units = "cm")
