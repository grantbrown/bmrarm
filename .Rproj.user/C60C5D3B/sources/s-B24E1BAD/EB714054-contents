library(magrittr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(coda)
library(ggmcmc)
library(xtable)


setwd("C:\\Users\\Nick\\Dropbox\\_Thesis\\bmrvar\\long_sims")
source("../run_apps_sims//helper_functions.R")

## Collect objects
max_mod <- 4
mod_list <- list()
obs <- c(1:max_mod)
for(i in 1:length(obs)){
  mod_list[[i]] <- readRDS(paste0("Z:\\bmrarm\\samples\\leish_data_slope_model_siw_small", i, ".RDS"))
  print(mod_list[[i]]$runtime)
}

full_mod <- mod_list[[1]]$samps

## Combined into a single model for DIC
full_mod$res_beta <- cbind(mod_list[[1]]$samps$res_beta,
                           mod_list[[2]]$samps$res_beta,
                           mod_list[[3]]$samps$res_beta,
                           mod_list[[4]]$samps$res_beta)

full_mod$res_pat_sig <- cbind(mod_list[[1]]$samps$res_pat_sig,
                              mod_list[[2]]$samps$res_pat_sig,
                              mod_list[[3]]$samps$res_pat_sig,
                              mod_list[[4]]$samps$res_pat_sig)

full_mod$res_sigma <- cbind(mod_list[[1]]$samps$res_sigma,
                            mod_list[[2]]$samps$res_sigma,
                            mod_list[[3]]$samps$res_sigma,
                            mod_list[[4]]$samps$res_sigma)

full_mod$res_cuts <- cbind(mod_list[[1]]$samps$res_cuts,
                           mod_list[[2]]$samps$res_cuts,
                           mod_list[[3]]$samps$res_cuts,
                           mod_list[[4]]$samps$res_cuts)

full_mod$res_ar <- c(mod_list[[1]]$samps$res_ar, mod_list[[2]]$samps$res_ar,
                     mod_list[[3]]$samps$res_ar, mod_list[[4]]$samps$res_ar)

full_mod$res_y <- abind::abind(mod_list[[1]]$samps$res_y,
                               mod_list[[2]]$samps$res_y,
                               mod_list[[3]]$samps$res_y,
                               mod_list[[4]]$samps$res_y, along = 3)

full_mod$res_pat_eff <- abind::abind(mod_list[[1]]$samps$res_pat_eff,
                              mod_list[[2]]$samps$res_pat_eff,
                              mod_list[[3]]$samps$res_pat_eff,
                              mod_list[[4]]$samps$res_pat_eff, along = 3)

summary(mcmc(full_mod$res_ar))
bmrarm:::get_DIC_ar(full_mod, marginal = T)


#DIC            D           pd dev_of_means
#942.80545    920.97587     21.82958    899.14628

## Slope
#DIC            D           pd dev_of_means
#901.89078    876.79116     25.09961    851.69155

## AR
# DIC            D           pd dev_of_means
# 898.97486    873.50987     25.46498    848.04489


# Posterior Predictive Checks ---------------------------------------------

## Get all predictions
set.seed(1)
#full_mod$res_beta <- full_mod$res_beta[, 1:5]
#all_preds <- get_pred(full_mod)
#saveRDS(all_preds, "./leish_posterior_preds_updated.RDS")
all_preds <- readRDS("./leish_posterior_preds.RDS")
data <- mod_list[[1]]$data
n_samp <- length(all_preds)
res <- matrix(NA, nrow = 3, ncol = n_samp)

for(i in 1:n_samp){
  data$leish_pred <- all_preds[[i]]$all_preds[, 1]
  dat_group <- group_by(data, ID) %>%
    filter(!is.na(leish_model)) %>%
    summarise(num_trans = sum(leish_pred != lag(leish_pred), na.rm = T),
              num_unique = length(unique(leish_pred))) %>%
    ungroup() %>%
    mutate(trans_cat = ifelse(num_trans == 0, 0,
                              ifelse(num_trans <= 2, 1, 2)))

  ## Number of transitions
  res_tmp <-
    group_by(dat_group, trans_cat) %>%
    summarise(n(), round(n() / 48 * 100, 3))

  if(min(res_tmp$trans_cat) == 1) {
    res[, i] <- c(0, res_tmp$`n()`)
  } else {
    res[, i] <- res_tmp$`n()`
  }
}

## Bayesian p-values for the ordinal data
mean(res[1, ] >= 8, na.rm = T)
round(summary(mcmc(res[1, ]))[[2]][c(1, 5)] / 48 * 100, 1)
mean(res[2, ] >= 25, na.rm = T)
round(summary(mcmc(res[2, ]))[[2]][c(1, 5)] / 48 * 100, 1)
mean(res[3, ] >= 15, na.rm = T)
round(summary(mcmc(res[3, ]))[[2]][c(1, 5)] / 48 * 100, 1)

## Continuous outcomes
res2 <- matrix(NA, nrow = 5, ncol = n_samp)
dat_last <- filter(data, time + 1 == max_not_na)
all_preds_keep <- matrix(NA, 48, n_samp)
for(i in 1:n_samp){
  dat_last$log_sla_pred <- all_preds[[i]]$last_preds[, 2]
  all_preds_keep[, i] <- all_preds[[i]]$last_preds[, 2]

  dat_group <- dat_last %>%
    summarise(mean(log_sla_pred),
              median(log_sla_pred),
              sd(log_sla_pred),
              min(log_sla_pred),
              max(log_sla_pred))
  res2[, i] <- unlist(dat_group)
  print(i)
}

library(bayesplot)
library(lme4)
plot(mod <- lmer(log_sla ~ treatment_group + time + age_ind + Hunt + (time|ID), data = data))
plot(density(resid(mod), na.rm = T))
plot(density(data$log_sla, na.rm = T))
hist(resid(mod), breaks = 60)
ppc_dens_overlay_grouped(dat_last$log_sla, t(all_preds_keep[, 1:25]), group = dat_last$age_ind)
ppc_dens_overlay_grouped(dat_last$log_sla, t(all_preds_keep[, 1:25]), group = dat_last$treatment)
ppc_dens_overlay_grouped(dat_last$log_sla, t(all_preds_keep[, 1:25]), group = dat_last$Hunt)
ppc_dens_overlay_grouped(dat_last$log_sla, t(all_preds_keep[, 1:25]), group = dat_last$leish_model)
p1 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'median') +
  annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.27", vjust=1, hjust=1)
p2 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'sd')  +
  annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.89", vjust=1, hjust=1)
p3 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'min') +
  annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.54", vjust=1, hjust=1)
p4 <- ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'max') +
  annotate(geom="text",  x=Inf, y = Inf, label = "p-value=0.92", vjust=1, hjust=1)

bayesplot_grid(p1, p2, p3, p4)

q95 <- function(x) quantile(x, probs = 0.05)
ppc_stat(dat_last$log_sla, t(all_preds_keep), stat = 'q95')

mean(apply(all_preds_keep, 2, function(x) quantile(x, probs = 0.05) >
             quantile(dat_last$log_sla, probs = 0.05)))
mean(res2[1, ] >= mean(dat_last$log_sla, na.rm = T))
mean(res2[2, ] >= median(dat_last$log_sla, na.rm = T))
mean(res2[3, ] >= sd(dat_last$log_sla, na.rm = T))
mean(res2[4, ] >= min(dat_last$log_sla, na.rm = T))
mean(res2[5, ] >= max(dat_last$log_sla, na.rm = T))

hist(res2[1, ], breaks = 50)
abline(v = median(dat_last$log_sla, na.rm = T), col = 2, lwd = 2)

hist(res2[2, ], breaks = 50)
abline(v = sd(dat_last$log_sla, na.rm = T), col = 2, lwd = 2)

hist(res2[3, ], breaks = 50)
abline(v = min(dat_last$log_sla, na.rm = T), col = 2, lwd = 2)

hist(res2[4, ], breaks = 50)
abline(v = max(dat_last$log_sla, na.rm = T), col = 2, lwd = 2)


# Plot predictions --------------------------------------------------------

## Extended X matrix
X_extend <- mod_list[[1]]$data %>%
  group_by(ID) %>%
  filter(time == max(time)) %>%
  slice(rep(1, each = 4)) %>%
  mutate(time = time + row_number(), log_sla = NA, leish_model = NA) %>%
  rbind(mod_list[[1]]$data) %>%
  ungroup() %>%
  arrange(ID, time) %>%
  mutate(forecast = as.numeric(is.na(log_sla) & is.na(leish_model)))

## Extended Z kron
Z <- matrix(rep(1, nrow(X_extend)), ncol = 1)
Z <- cbind(Z, X_extend$time)
Z_kron_for <- kronecker(diag(rep(1, 2)), Z)
X_for <- cbind(1, select(X_extend, treatment, time, age_ind, log_dpp, hunt_M, hunt_W))

full_mod$Z_kron_for <- Z_kron_for
full_mod$X_for <- X_for
full_mod$pat_long_for <- X_extend$pat_idx
samps <- full_mod

## Get forecasts
set.seed(1)
#full_mod$res_beta <- full_mod$res_beta[, 1:200]
#all_preds <- get_forecasts(full_mod)
#saveRDS(all_preds, "./leish_forecasts.RDS")
all_preds <- readRDS("./leish_forecasts.RDS")

## Get slope forecasts
#set.seed(1)
#all_preds_sl <- get_forecasts(full_mod)
#saveRDS(all_preds_sl, "./leish_forecasts_slope.RDS")
all_preds_sl <- readRDS("./leish_forecasts_slope.RDS")

n_samp <- length(all_preds)
all_preds_slope <- all_preds_keep <- all_preds_ord <- matrix(NA, nrow = 48 * 4, ncol = n_samp)
for(i in 1:n_samp){
  all_preds_keep[, i] <- as.numeric(t(all_preds[[i]][[1]][,2, ]))
  all_preds_ord[, i] <- as.numeric(t(all_preds[[i]][[1]][,1, ]))
  all_preds_slope[, i] <- as.numeric(t(all_preds_sl[[i]][[1]][,2, ]))
  print(i)
}

X_extend$sla_pred <- X_extend$sla_025 <- X_extend$sla_975 <-
  X_extend$slope_pred <- X_extend$slope_025 <- X_extend$slope_975 <-
  X_extend$pred0 <- X_extend$pred1 <- X_extend$pred2 <- X_extend$pred3 <-  NA
X_extend$sla_pred[X_extend$forecast == 1] <- rowMeans(all_preds_keep)
X_extend$sla_025[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
                                                  function(x) quantile(x, 0.025))
X_extend$sla_975[X_extend$forecast == 1] <- apply(all_preds_keep, 1,
                                                     function(x) quantile(x, 0.975))

X_extend$slope_pred[X_extend$forecast == 1] <- rowMeans(all_preds_slope)
X_extend$slope_025[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
                                                  function(x) quantile(x, 0.025))
X_extend$slope_975[X_extend$forecast == 1] <- apply(all_preds_slope, 1,
                                                  function(x) quantile(x, 0.975))


X_extend$pred0 <- as.numeric(X_extend$leish_model == 1)
X_extend$pred1 <- as.numeric(X_extend$leish_model == 2)
X_extend$pred2 <- as.numeric(X_extend$leish_model == 3)
X_extend$pred3 <- as.numeric(X_extend$leish_model == 4)
X_extend$pred0[X_extend$forecast == 1] <- rowMeans(all_preds_ord == 1)
X_extend$pred1[X_extend$forecast == 1] <- rowMeans(all_preds_ord == 2)
X_extend$pred2[X_extend$forecast == 1] <- rowMeans(all_preds_ord == 3)
X_extend$pred3[X_extend$forecast == 1] <- rowMeans(all_preds_ord == 4)

dat_plot <- filter(X_extend, pat_idx %in% c(2, 4, 6, 8, 9, 10, 11, 14, 15))  %>%
  mutate(pat_idx = paste0("Patient ", toupper(letters[dense_rank(pat_idx)])),
         Type = ifelse(is.na(sla_pred), "Observation", "Prediction"),
         sla_pred = coalesce(sla_pred, log_sla))

ggplot(dat_plot, aes(x = time, y = sla_pred, col = Type)) +
  geom_point(size = 2) +
  geom_point(aes(x = time, y = slope_pred), size = 2, col = 2) +
  geom_errorbar(aes(ymin=sla_025, ymax=sla_975), width=0.8, col = '#619CFF') +
  geom_errorbar(aes(ymin=slope_025, ymax=slope_975), width=0.8, col = '#00BA38') +
  facet_wrap(.~ pat_idx) +
  theme_bw() +
  theme(text = element_text(size=18)) +
  ylab("Log Anti-SLA") +
  xlab("Time from Baseline")


# Ordinal outcome predictions ---------------------------------------------

ord_data <- pivot_longer(select(X_extend, pat_idx, time, leish_model,
                                pred0, pred1, pred2, pred3),
                         cols = c(pred3, pred0, pred1, pred2))

ord_data$name <- factor(ord_data$name, levels = c("pred3", "pred2", "pred1", "pred0"),
                        labels = c("3",
                                "2",
                                "1",
                                "0"))

dat_plot <- filter(ord_data, pat_idx %in% c(2, 4, 6, 8, 9, 10, 11, 14, 15))  %>%
  mutate(pat_idx = paste0("Patient ", toupper(letters[dense_rank(pat_idx)])),
         point_val = ifelse(!is.na(leish_model), 0.5, NA))

ggplot(dat_plot, aes(x=time, y=value, fill=name)) +
  geom_bar(stat="identity") +
  geom_point(aes(x = time, y = point_val), size = 3) +
  facet_wrap(.~ pat_idx) +
  guides(fill = guide_legend(override.aes = list(shape = NA))) +
  labs(fill = "LeishVet Score") +
  theme_bw() +
  theme(text = element_text(size=18)) +
  ylab("Probability") +
  xlab("Time from Baseline")

